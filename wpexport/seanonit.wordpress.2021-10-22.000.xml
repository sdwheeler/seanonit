<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2021-10-22 21:09"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Sean on IT</title>
<link>https://seanonit.wordpress.com</link>
<description>Random thoughts and things I have learned in my IT journey.</description>
<pubDate>Fri, 22 Oct 2021 21:09:56 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://seanonit.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_id>73837961</wp:author_id>
  <wp:author_login>swsamwa</wp:author_login>
  <wp:author_email>swsamwa@live.com</wp:author_email>
  <wp:author_display_name><![CDATA[Sean Wheeler]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[Sean]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[Wheeler]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>178</wp:term_id>
  <wp:category_nicename>books</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Books]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>2299598</wp:term_id>
  <wp:category_nicename>command-shell</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Command Shell]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>209196</wp:term_id>
  <wp:category_nicename>git</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Git]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>5603054</wp:term_id>
  <wp:category_nicename>github</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[GitHub]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1035</wp:term_id>
  <wp:category_nicename>other</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Other]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>35175609</wp:term_id>
  <wp:category_nicename>powershell</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[PowerShell]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>403097</wp:term_id>
  <wp:category_nicename>remedy</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Remedy]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>8320</wp:term_id>
  <wp:category_nicename>scams</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Scams]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>2929</wp:term_id>
  <wp:category_nicename>scripting</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Scripting]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1090471</wp:term_id>
  <wp:category_nicename>throwback-thursday</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Throwback Thursday]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>28683585</wp:term_id>
  <wp:category_nicename>arapi</wp:category_nicename>
  <wp:category_parent>remedy</wp:category_parent>
  <wp:cat_name><![CDATA[ARAPI]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>136033</wp:term_id>
  <wp:tag_slug>net-framework</wp:tag_slug>
  <wp:tag_name><![CDATA[.NET Framework]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>219930</wp:term_id>
  <wp:tag_slug>activedirectory</wp:tag_slug>
  <wp:tag_name><![CDATA[ActiveDirectory]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>291653338</wp:term_id>
  <wp:tag_slug>arapi-net</wp:tag_slug>
  <wp:tag_name><![CDATA[ARAPI.NET]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>202726</wp:term_id>
  <wp:tag_slug>batch</wp:tag_slug>
  <wp:tag_name><![CDATA[batch]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>273</wp:term_id>
  <wp:tag_slug>blog</wp:tag_slug>
  <wp:tag_name><![CDATA[blog]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1671563</wp:term_id>
  <wp:tag_slug>bmc-software</wp:tag_slug>
  <wp:tag_name><![CDATA[BMC Software]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12414793</wp:term_id>
  <wp:tag_slug>byte-array</wp:tag_slug>
  <wp:tag_name><![CDATA[Byte array]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2426</wp:term_id>
  <wp:tag_slug>c</wp:tag_slug>
  <wp:tag_name><![CDATA[C#]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>414127</wp:term_id>
  <wp:tag_slug>certificates</wp:tag_slug>
  <wp:tag_name><![CDATA[certificates]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>29959</wp:term_id>
  <wp:tag_slug>cmd</wp:tag_slug>
  <wp:tag_name><![CDATA[cmd]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>130431959</wp:term_id>
  <wp:tag_slug>comment-based-help</wp:tag_slug>
  <wp:tag_name><![CDATA[comment-based help]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>647103</wp:term_id>
  <wp:tag_slug>ews</wp:tag_slug>
  <wp:tag_name><![CDATA[ews]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>31865148</wp:term_id>
  <wp:tag_slug>exchange-web-services</wp:tag_slug>
  <wp:tag_name><![CDATA[exchange web services]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>304757761</wp:term_id>
  <wp:tag_slug>kb3000850</wp:tag_slug>
  <wp:tag_name><![CDATA[KB3000850]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>293716420</wp:term_id>
  <wp:tag_slug>mps-reports</wp:tag_slug>
  <wp:tag_name><![CDATA[MPS Reports]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>337655249</wp:term_id>
  <wp:tag_slug>nativecommandfailed</wp:tag_slug>
  <wp:tag_name><![CDATA[NativeCommandFailed]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>178495</wp:term_id>
  <wp:tag_slug>powershell</wp:tag_slug>
  <wp:tag_name><![CDATA[powershell]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>54025</wp:term_id>
  <wp:tag_slug>regex</wp:tag_slug>
  <wp:tag_name><![CDATA[regex]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>44443</wp:term_id>
  <wp:tag_slug>regular-expressions</wp:tag_slug>
  <wp:tag_name><![CDATA[regular expressions]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>403097</wp:term_id>
  <wp:tag_slug>remedy</wp:tag_slug>
  <wp:tag_name><![CDATA[Remedy]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1518</wp:term_id>
  <wp:tag_slug>rss</wp:tag_slug>
  <wp:tag_name><![CDATA[RSS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>801</wp:term_id>
  <wp:tag_slug>security</wp:tag_slug>
  <wp:tag_name><![CDATA[Security]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7916</wp:term_id>
  <wp:tag_slug>stats</wp:tag_slug>
  <wp:tag_name><![CDATA[stats]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1515155</wp:term_id>
  <wp:tag_slug>tbt</wp:tag_slug>
  <wp:tag_name><![CDATA[TBT]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>178506</wp:term_id>
  <wp:tag_slug>wmi</wp:tag_slug>
  <wp:tag_name><![CDATA[WMI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2752</wp:term_id>
  <wp:tag_slug>woot</wp:tag_slug>
  <wp:tag_name><![CDATA[woot!]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5305445</wp:term_id>
  <wp:tag_slug>x-509</wp:tag_slug>
  <wp:tag_name><![CDATA[x.509]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6852</wp:term_id>
  <wp:tag_slug>xml</wp:tag_slug>
  <wp:tag_name><![CDATA[XML]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>

<image>
	<url>https://seanonit.files.wordpress.com/2015/03/onit.png?w=32</url>
	<title>Sean on IT</title>
	<link>https://seanonit.wordpress.com</link>
	<width>32</width>
	<height>32</height>
</image>
<item>
  <title>About</title>
  <link>https://seanonit.wordpress.com/about/</link>
  <pubDate>Tue, 21 Oct 2014 02:21:35 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[Hi, my name is Sean Wheeler. My interest in computers started in 1978 when I first learned to program in BASIC from a book without access to a computer. My first computer was the Netronics ELF II built from a kit. It had 256 bytes of RAM.

[gallery ids="419,418" type="rectangular"]

Later, I saved up my money and bought an Apple //e. This got me through my first two years of college. By then, the PC Clone market was starting to heat up and I bought a Turbo XT clone, the first of many PCs I would own. At university I studied Computer Science and worked as a system operator for the campus VAX cluster. I loved the DCL scripting language in VMS. After graduation, I got into Netware. That paid the bills for several years. In February of 1995, I hired by Microsoft to support Windows (WFW 3.11, LanMan 2.x, NT 3.1, &NT 3.5) for large corporate customers.

These days I am a writer for PowerShell on Microsoft Docs. I have a long history with scripting languages. I have taught several courses on VBScript and PowerShell over the years. PowerShell is my current favorite.

<disclaimer type="standard">

Any views and opinions presented on this blog are my own and do not represent views or opinions of any of my employers - past, present or future. The information presented here is provided without warranty. Use at your own risk. Dry clean only. Use a cool iron. Don't get it wet. Don't feed it after midnight.

<a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license"><img style="border-width:0;" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" alt="Creative Commons License" /></a>
This work is licensed under a <a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license">Creative Commons Attribution-ShareAlike 4.0 International License</a>.

</disclaimer>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2014-10-21 02:21:35</wp:post_date>
  <wp:post_date_gmt>2014-10-21 02:21:35</wp:post_date_gmt>
  <wp:post_modified>2021-01-07 10:53:16</wp:post_modified>
  <wp:post_modified_gmt>2021-01-07 18:53:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[page-full-width.php]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Thus begins my adventure in blogging</title>
  <link>https://seanonit.wordpress.com/2014/10/21/thus-begins-my-adventure-in-blogging/</link>
  <pubDate>Tue, 21 Oct 2014 03:45:49 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=2</guid>
  <description/>
  <content:encoded><![CDATA[I have finally decided that it is time to start a blog. My intention is to use this as a platform to share ideas a things that I have learned about various IT-related subjects.

Part of my motivation is to document the things I learned the hard way. For example, recently I have been creating tools BMC Remedy using the ARAPI.NET. I have found that there are not a lot of good examples available. I have had to figure out things the hard way. I figured that I should share my learnings so that other can benefit from my experience.

My second motivation is to become a better writer. I figure that to be a good writer you first have to write something. My hope is that, occasionally, someone will find something interesting or useful.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2014-10-21 03:45:49</wp:post_date>
  <wp:post_date_gmt>2014-10-21 03:45:49</wp:post_date_gmt>
  <wp:post_modified>2014-10-21 03:45:49</wp:post_modified>
  <wp:post_modified_gmt>2014-10-21 03:45:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>thus-begins-my-adventure-in-blogging</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Bill Loden]]></wp:comment_author>
    <wp:comment_author_email>Bill@LodenRealEstate.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>75.109.208.250</wp:comment_author_IP>
    <wp:comment_date>2014-10-29 13:47:43</wp:comment_date>
    <wp:comment_date_gmt>2014-10-29 21:47:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[AWESOME!  No doubt you are god-like in all facets of your busy life.  :o)  Seriously, good luck with this ... I bet it will pay dividends.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414619263.37508106231689453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1414620136]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414620136]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414620136.1997001171112060546875;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>98.99.251.254</wp:comment_author_IP>
    <wp:comment_date>2014-10-29 14:02:16</wp:comment_date>
    <wp:comment_date_gmt>2014-10-29 22:02:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Bill. Help me spread the word! :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>2</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414620136]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414620136.4976770877838134765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1414620136]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun with Regular Expressions</title>
  <link>https://seanonit.wordpress.com/2014/10/21/fun-with-regular-expressions/</link>
  <pubDate>Wed, 22 Oct 2014 02:47:03 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=7</guid>
  <description/>
  <content:encoded><![CDATA[A while back a friend of mine mentioned that he could not find a regular expression that was capable of parsing Windows Performance counter strings. He said that it couldn't be done with regex alone and he had written a lot of code to manually parse the strings. That sounded like a challenge to me. I had recently been working on a project where I needed regular expressions to find and clean up text that I was extracting from a large database. I had spent a lot of time learning what I could about regex to make the job easier. Along the way, I found a great tool called <a title="Expresso" href="http://www.ultrapico.com/Expresso.htm">Expresso</a>.

[caption id="attachment_8" align="aligncenter" width="605"]<a href="https://seanonit.files.wordpress.com/2014/10/expresso.png"><img class="wp-image-8 size-large" src="https://seanonit.files.wordpress.com/2014/10/expresso.png?w=605" alt="expresso screenshot" width="605" height="563" /></a> Expresso showing the parsed results of this regex[/caption]

Expresso is a power tool for developing and testing regular expressions. In just a few minutes I was able to create a regex that fit the bill. Since he was writing code in PowerShell to process these performance counters I sent him this proof of concept.

```powershell
$ctrs = (
  '\\IDCWEB1\Processor(_Total)\% Processor Time',
  '\Paging File(\??\C:\pagefile.sys)\% Usage Peak',
  '\MSSQL$SQLServer:Memory Manager\Total Server Memory (KB)',
  '\\BLACKVISE\Paging File(\??\C:\pagefile.sys)\% Usage Peak',
  '\Category(Instance(x))\Counter (x)',
  '\SQLServer:Latches\Latch Waits/sec (ms)'
)

$pattern = '(?<srv>\\\\[^\\]*)?\\(?<obj>[^\(^\)]*)(\((?<inst>.*(\(.*\))?)\))?\\(?<ctr>.*\s?(\(.*\))?)'

foreach ($ctr in $ctrs) {
  if ($ctr -match $pattern) {
    "Server = " + $matches["srv"]
    "Object = " + $matches["obj"]
    "Instance = " + $matches["inst"]
    "Counter = " + $matches["ctr"]
    ""
  }
}
```

Here is the output :

[code language="text"]
Server = \\IDCWEB1
Object = Processor
Instance = _Total
Counter = % Processor Time

Server =
Object = Paging File
Instance = \??\C:\pagefile.sys
Counter = % Usage Peak

Server =
Object = MSSQL$SQLServer:Memory Manager
Instance =
Counter = Total Server Memory (KB)

Server = \\BLACKVISE
Object = Paging File
Instance = \??\C:\pagefile.sys
Counter = % Usage Peak

Server =
Object = Category
Instance = Instance(x)
Counter = Counter (x)

Server =
Object = SQLServer:Latches
Instance =
Counter = Latch Waits/sec (ms)
```

By the way, the PowerShell script he was writing was part of <a href="http://pal.codeplex.com/">PAL</a>. Check out <a href="http://blogs.technet.com/b/clinth/">Clint's</a> incredible performance analysis tool.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2014-10-21 18:47:03</wp:post_date>
  <wp:post_date_gmt>2014-10-22 02:47:03</wp:post_date_gmt>
  <wp:post_modified>2017-02-09 08:34:30</wp:post_modified>
  <wp:post_modified_gmt>2017-02-09 16:34:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-regular-expressions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="post_tag" nicename="regex"><![CDATA[regex]]></category>
  <category domain="post_tag" nicename="regular-expressions"><![CDATA[regular expressions]]></category>
  <category domain="category" nicename="scripting"><![CDATA[Scripting]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5930539206672662528&type=U&a=iu6A]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042283</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"p0ipCmYJdp";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27350507015]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>expresso</title>
  <link>https://seanonit.wordpress.com/2014/10/21/fun-with-regular-expressions/expresso/</link>
  <pubDate>Wed, 22 Oct 2014 02:42:04 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2014/10/expresso.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>2014-10-21 18:42:04</wp:post_date>
  <wp:post_date_gmt>2014-10-22 02:42:04</wp:post_date_gmt>
  <wp:post_modified>2014-10-21 18:42:04</wp:post_modified>
  <wp:post_modified_gmt>2014-10-22 02:42:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>expresso</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>7</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2014/10/expresso.png</wp:attachment_url>
</item>
<item>
  <title>Installing BMC's ARAPI.NET library</title>
  <link>https://seanonit.wordpress.com/2014/10/22/installing-bmcs-arapi-net-library/</link>
  <pubDate>Wed, 22 Oct 2014 21:06:41 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=18</guid>
  <description/>
  <content:encoded><![CDATA[<b>Motivation</b>

In my current job, my team is responsible for our ITIL management tool suite. We use the Remedy ITSM Suite from BMC Software. In my role on the team, I am responsible for the design, operation, and performance of the Windows Servers that host the BMC solution. There are others on the team that specialize in development and operation of the Remedy ITSM software.

I point this out to say that I am not a Remedy expert. But I have built some tools using BMC's API libraries (ARAPI.NET). I have not been very happy with the documentation and examples that I have been able to find online (both on BMC's site and on other developer sites). The examples don't seem very useful. I still have not been able to find a good collection of programming patterns for using the Remedy APIs. If you know of some, please share.

This post will be the first of many. I am planning to document the what I have learned about using ARAPI.NET. I have no particular outline or agenda. I will just want to share what I have learned and hopefully provide some better examples.

<b>Installing ARAPI.NET</b>

<i>Step 1:</i> Download the bits from the BMC website. I have provided a link to the v8.0 version of the API in the <b>Resources</b> section below. From there you can find links to old versions but I find that this version works with Remedy 7.6 and higher. The download link is toward the bottom of the web page. You will have to accept the license terms.

<i>Step 2:</i> Unzip the package into a folder. The download is just a ZIP. There is no installer. I put mine in C:\Program Files (x86)\BMC Software\ARAPI80.NET. Why there? Because:

<ul>
    <li>I don't like to install things in the root of the drive.</li>
    <li>The API library only supports 32-bit processes (hence the x86 folder).</li>
    <li>%PROGRAMFILES%\BMC Software is the default location for most of the other BMC products.</li>
</ul>

<i>Step 3:</i> Register the Remedy API COM classes. This step may be optional if you do not plan on using the COM interfaces. If you are only writing .NET code then you can skip this. If the target machine does not have Visual Studio installed but does have the .NET Framework SDK installed, use the SDK command prompt by choosing Programs, then Microsoft .NET Framework SDK v2.0. If you cannot find it, open a command prompt at the path where Regasm is located. For example, the .NET Framework 2.0 default installation path is C:\Windows\Microsoft.NET\Framework\v2.0.50727.

On my machine I ran the following command:

```
C:\Windows\Microsoft.NET\Framework\v2.0.50727\RegAsm.exe "c:\Program Files (x86)\BMC Software\ARAPI80.NET\BMC.ARSystem.dll" /codebase
```

Note that this requires administrative rights. So you need to run it from an elevated command prompt.

<i>Step 4:</i> Add the API folder to your system PATH environment.   When you run an ARAPI client program, make sure the ARAPI.NET directory is in the DLL search path for that process (either by copying needed files to the working directory of the program or using this installation directory as the working directory for your program).

That's it. Now you can start creating programs and scripts using the Remedy API. In future articles, I will provide examples in C# or Powershell. Now it is time to read the available documentation. See the links below.

<b>Resources</b>
Download AR System .NET and COM API 8.0.0
<a href="https://communities.bmc.com/docs/DOC-22613">https://communities.bmc.com/docs/DOC-22613</a>

AR System APIs Quick Start C#
<a href="https://communities.bmc.com/docs/DOC-17517">https://communities.bmc.com/docs/DOC-17517</a>

AR System APIs Quick Start VB
<a href="https://communities.bmc.com/docs/DOC-17518">https://communities.bmc.com/docs/DOC-17518</a>

Action Request System .NET and COM API part 1
<a href="https://communities.bmc.com/docs/DOC-50">https://communities.bmc.com/docs/DOC-50</a>

Action Request System .NET and COM API part 2
<a href="https://communities.bmc.com/docs/DOC-51">https://communities.bmc.com/docs/DOC-51</a>

Remedy AR System API and Integration Interfaces Overview
<a href="https://communities.bmc.com/docs/DOC-17512">https://communities.bmc.com/docs/DOC-17512</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>2014-10-22 13:06:41</wp:post_date>
  <wp:post_date_gmt>2014-10-22 21:06:41</wp:post_date_gmt>
  <wp:post_modified>2017-02-09 08:35:58</wp:post_modified>
  <wp:post_modified_gmt>2017-02-09 16:35:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>installing-bmcs-arapi-net-library</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net-framework"><![CDATA[.NET Framework]]></category>
  <category domain="category" nicename="arapi"><![CDATA[ARAPI]]></category>
  <category domain="post_tag" nicename="arapi-net"><![CDATA[ARAPI.NET]]></category>
  <category domain="post_tag" nicename="bmc-software"><![CDATA[BMC Software]]></category>
  <category domain="category" nicename="remedy"><![CDATA[Remedy]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204049045200907]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042283</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:1067441399;b:1;}s:7:"twitter";a:1:{i:11212690;s:53:"https://twitter.com/swsamwa/status/781634201363763200";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/8SithvRCoS9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5930796221412171776&type=U&a=KcMc]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27350479676]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ddf1cb25410ff9856e292b7edfffdf47</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_be1a458d5758a3db6008f243367b6dcb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_064ff05ca5465e5fe09519a3f262dd81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0164297d6d1f0ffc3fe20c1c1e8ba54b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1418c4debbd2753e74a0b9a272aac45</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_47952cc9ce8cf63c001fcea667586948</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c581d438f34877a64086be08fd9b11d6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c581d438f34877a64086be08fd9b11d6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2fdc198289c9f1a8ed934492cd40e9cd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9eba645eff3422148194be15fd44871c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_08b038cae7dc6b912f1a973d4e50f037</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc5f9a1adf716fd9e73aed586102fa92</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7a14491865cf7aaa047f7d215cdaeb97</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11153016</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[swsamwa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1</wp:comment_id>
    <wp:comment_author><![CDATA[Using ARAPI.NET from PowerShell | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://seanonit.wordpress.com/2014/10/23/using-arapi-net-from-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.38.12</wp:comment_author_IP>
    <wp:comment_date>2014-10-23 09:43:42</wp:comment_date>
    <wp:comment_date_gmt>2014-10-23 17:43:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my last post I explain how to install ARAPI.NET. Now let&#8217;s take a look at how you can use the Remedy API in a PowerShell Script. The first [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414086222.9297358989715576171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414087955]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414087955.7585489749908447265625;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[Simple ARAPI.NET Query Example in C# | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://seanonit.wordpress.com/2014/11/07/simple-arapi-net-query-example-in-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.121</wp:comment_author_IP>
    <wp:comment_date>2014-11-07 11:31:41</wp:comment_date>
    <wp:comment_date_gmt>2014-11-07 19:31:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] that you have ARAPI.NET installed let&#8217;s take a look at an example using C#. In this example I am creating a simple query to [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415388701.738607883453369140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1415400530]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415393872.6012079715728759765625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415400530.8292229175567626953125;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>78</wp:comment_id>
    <wp:comment_author><![CDATA[Christopher Speed]]></wp:comment_author>
    <wp:comment_author_email>christopher.speed@uscellular.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>165.27.246.1</wp:comment_author_IP>
    <wp:comment_date>2016-08-23 10:39:28</wp:comment_date>
    <wp:comment_date_gmt>2016-08-23 18:39:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Do you know how to get this ARAPI working with ASP and JSCript. I am getting the following error. Automation server can't create object.

Thanks,
Christopher]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1471977797]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1471977798]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1471977798.68717193603515625;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1471977569.107592105865478515625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>79</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>131.107.174.151</wp:comment_author_IP>
    <wp:comment_date>2016-08-23 10:46:56</wp:comment_date>
    <wp:comment_date_gmt>2016-08-23 18:46:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have not done that. But I have written an ARAPI.NET application in C#/ASP.NET. Specifically, I created a login app in ASP.NET that looked up user information in AD based on your Windows credentials then looked up the person and user records in Remedy based on this information. It used that information to pre-fill a web form with the user's Remedy ID.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>78</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1471978017]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1471978018.1892769336700439453125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[26076654121]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1471978019]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>80</wp:comment_id>
    <wp:comment_author><![CDATA[Christopher Speed]]></wp:comment_author>
    <wp:comment_author_email>christopher.speed@uscellular.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>165.27.246.1</wp:comment_author_IP>
    <wp:comment_date>2016-08-23 10:57:33</wp:comment_date>
    <wp:comment_date_gmt>2016-08-23 18:57:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[For whatever reason, it has some issues with 32-bit compatibility. I ran your script on powershell, thanks for that, and it worked fine. Not sure how to get through this issue, I changed IIS to allow 32 bit applications and still nothing.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>79</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[26076937547]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1471978654]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1471978653]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1471978653.9893009662628173828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>81</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>131.107.160.151</wp:comment_author_IP>
    <wp:comment_date>2016-08-23 12:35:21</wp:comment_date>
    <wp:comment_date_gmt>2016-08-23 20:35:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I had the same issue with ASP.NET when I started. Make sure you have followed my instructions on how to install <a href="https://seanonit.wordpress.com/2014/10/22/installing-bmcs-arapi-net-library" target="_blank">ARAPI.NET</a> and you have the necessary <a href="https://seanonit.wordpress.com/2015/04/02/fixing-the-specified-module-could-not-be-found-errors-when-using-arapi-net" target="_blank">.NET DLLs copied</a>. For IIS, you have to enable support for 32-bit applications, as you mentioned. Be sure that you have built your ASP.NET application for 32-bit format and <a href="https://seanonit.wordpress.com/2014/11/07/simple-arapi-net-query-example-in-c" target="_blank">included the proper references</a>. Lastly, be sure to add the ARAPI.NET folder to the IIS server's PATH in the SYSTEM environment variables.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>80</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1471984522]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1471984522.620439052581787109375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[26079560804]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1471984523]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>89</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:35</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Installing BMC&#8217;s ARAPI.NET library [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189495.4940679073333740234375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191350]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191350.91767406463623046875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Using ARAPI.NET from PowerShell</title>
  <link>https://seanonit.wordpress.com/2014/10/23/using-arapi-net-from-powershell/</link>
  <pubDate>Thu, 23 Oct 2014 17:43:22 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=23</guid>
  <description/>
  <content:encoded><![CDATA[In my last post I explained how to <a href="http://seanonit.wordpress.com/2014/10/22/installing-bmcs-arapi-net-library/">install ARAPI.NET</a>. Now let's take a look at how you can use the Remedy API in a PowerShell Script. The first trick to using ARAPI.NET is to ensure that you are running your script with the 32-bit instance of PowerShell. These days you will most likely be running a 64-bit version of Windows so the default icon launches the 64-bit version of PowerShell. Look for the icon labelled "Windows PowerShell (x86)" to launch the 32-bit version. In the example script below I will show you another method for ensuring that you have a 32-bit instance.

This will do a simple query for a Person record in Remedy. The outline looks like this:
<ol>
	<li>Log into the AR Server</li>
	<li>Build a list of Field IDs that you want to retrieve from Remedy</li>
	<li>Create a Qualifier string used to query the database</li>
	<li>Query a Remedy form (passing in the qualifier and field list)</li>
	<li>Process the results</li>
	<li>Logoff the AR Server</li>
</ol>

[code language="powershell" title="get-remedyuser.ps1"]
param ($searchValue="Allen",
       $fieldID=4,
       $ARServerName = "arserver.calbrosvcs.internal",
       $ARSvcAccount = "Demo",
       $ARSvcPassword = "Password",
       $ARAuthentication = "",
       $ARServerPort = 51100,
       $formName = "CTM:People")

if ($Env:PROCESSOR_ARCHITECTURE -ne "x86") {
  $powershell=Join-Path $PSHOME.tolower().replace("system32","syswow64") powershell.exe
  "Launching Windows Powershell (x86)..."
  &"$powershell" -NonInteractive -ExecutionPolicy Bypass $myInvocation.Line
}
else {
   # Load the ARAPI.NET classes
   add-type -path 'C:\Program Files (x86)\BMC Software\ARAPI80.NET\BMC.ARSystem.dll'

   # Login to the AR Server
   $arserver = new-object BMC.ARSystem.Server
   $arserver.Login($ARServerName, $ARSvcAccount, $ARSvcPassword, $ARAuthentication, $ARServerPort)

   # List of field IDs to retrieve from Remedy
   # Hash table of FieldId# = "Display name of field"
   $fieldIDs = @{
               1="Person ID";
               4="Remedy User ID";
               5="Last Modified By";
               6="Last Modified On";
               7="Profile Status";
       200000006="Department";
       260000006="Manager";
       300469300="Cost Center Code";
       301336500="Manager ID";
      1000000001="Company";
      1000000010="Organization";
      1000000018="Last Name";
      1000000019="First Name";
      1000000023="Job Title";
      1000000025="Support Staff";
      1000000026="VIP Status";
      1000000048="Internet Email";
      1000000049="Corporate Email";
      1000000346="Assign Availability";
      1000006694="Authorization Alias";
      1764007102="Network ID";
   }

   # Build the Field List by adding the Field Id numbers
   [BMC.ARSystem.EntryListFieldList] $formEntryFieldList = new-object BMC.ARSystem.EntryListFieldList
   $fieldIDs.Keys | %{ $formEntryFieldList.AddField($_) }

   # Query string - default = search for Person by Remedy ID
   $qualifier = "'{0}' = ""{1}""" -f $fieldID,$searchValue

   # Execute the query
   [BMC.ARSystem.EntryFieldValueList] $entryList = $arserver.GetListEntryWithFields($formName, $qualifier, $formEntryFieldList, 0, 0);

   # Display the results
   foreach ($entry in $entryList) {
     "----------------"
      $fieldIDs.Keys | sort-object |
         foreach-object { "[{0:0000000000}] {1,19} = {2}" -f $_,$fieldIDs[$_],$entry.fieldvalues[$_] }
     "----------------"
   }
   $arserver.Logout()
}
```

Example output:
<pre>Launching Powershell x86...
----------------
[0000000001]           Person ID = PPL000000002007
[0000000004]      Remedy User ID = Allen
[0000000005]    Last Modified By = AR_ESCALATOR
[0000000006]    Last Modified On = 9/20/2014 1:00:02 AM
[0000000007]      Profile Status = 1
[0200000006]          Department = Customer Service
[0260000006]             Manager = Mary Mann
[0300469300]    Cost Center Code = 100.000012345
[0301336500]          Manager ID = Mary
[1000000001]             Company = Calbro Services
[1000000010]        Organization = Information Technology
[1000000018]           Last Name = Allbrook
[1000000019]          First Name = Allen
[1000000023]           Job Title = Supervisor
[1000000025]       Support Staff = 1
[1000000026]          VIP Status = 1
[1000000048]      Internet Email = allen@calbro.example.com
[1000000049]     Corporate Email = allen@calbro.example.com
[1000000346] Assign Availability = 0
[1000006694] Authorization Alias = allen
[1764007102]          Network ID = allen
----------------
</pre>

<hr />

Let's break this down a bit. First, I define the command line parameters for the script. I have defaulted the values so that the script searches for Allen Allbrook by default.

```powershell
param ($searchValue="Allen",
       $fieldID=4,
       $ARServerName = "arserver.calbrosvcs.internal",
       $ARSvcAccount = "Demo",
       $ARSvcPassword = "Password",
       $ARAuthentication = "",
       $ARServerPort = 51100,
       $formName = "CTM:People")
```

Any of these parameters can be passed on the command line. For example, if you want to search by email you could run the script as follows:
<pre>.\get-remeduser.ps1 -searchValue allen@calbro.example.com -fieldID 1000000048
</pre>
Next, I check to see if the script is running in a 32-bit instance of PowerShell. Windows sets the PROCESSOR_ARCHITECTURE environment variable of a process to the reflect processor architecture (e.g. AMD64 = 64-bit, x86 = 32-bit). This part of the script checks that variable and relaunches the script using the 32-bit version of PowerShell if necessary.

[code language="powershell" firstline="10"]
if ($Env:PROCESSOR_ARCHITECTURE -ne "x86") {
  $powershell=Join-Path $PSHOME.tolower().replace("system32","syswow64") powershell.exe
  "Launching Windows Powershell (x86)..."
  &"$powershell" -NonInteractive -ExecutionPolicy Bypass $myInvocation.Line
}
```

Hopefully the rest of the script is fairly self-explanatory. I like to use a hash table for the Field Ids so that I can map friendly names to the unfriendly field ID numbers.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>23</wp:post_id>
  <wp:post_date>2014-10-23 09:43:22</wp:post_date>
  <wp:post_date_gmt>2014-10-23 17:43:22</wp:post_date_gmt>
  <wp:post_modified>2014-10-23 09:49:33</wp:post_modified>
  <wp:post_modified_gmt>2014-10-23 17:49:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-arapi-net-from-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="arapi"><![CDATA[ARAPI]]></category>
  <category domain="post_tag" nicename="arapi-net"><![CDATA[ARAPI.NET]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="post_tag" nicename="remedy"><![CDATA[Remedy]]></category>
  <category domain="category" nicename="scripting"><![CDATA[Scripting]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/HpVQ9XUg9gf]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5931107498663628800&type=U&a=Xehq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>30</wp:comment_id>
    <wp:comment_author><![CDATA[Remy]]></wp:comment_author>
    <wp:comment_author_email>raymond.mccabe@eu.nabgroup.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.172.139.38</wp:comment_author_IP>
    <wp:comment_date>2015-06-08 05:57:22</wp:comment_date>
    <wp:comment_date_gmt>2015-06-08 13:57:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is an excellent article, it has taken me from no knowledge right up to querying and getting results in a very short time indeed.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1433771842.787384033203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433772395.7060201168060302734375;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1433772395]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1433772395]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31</wp:comment_id>
    <wp:comment_author><![CDATA[Remy]]></wp:comment_author>
    <wp:comment_author_email>raymond.mccabe@eu.nabgroup.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.172.139.38</wp:comment_author_IP>
    <wp:comment_date>2015-06-10 02:43:23</wp:comment_date>
    <wp:comment_date_gmt>2015-06-10 10:43:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Can I suggest a future blog article on how to "write" remedy forms using powershell? This one covers the reading part perfectly.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1433957373]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433957355.7607429027557373046875;s:5:"event";s:17:"status-unapproved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433957362.4530088901519775390625;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433957363.7982769012451171875;s:5:"event";s:17:"status-unapproved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1433933004.346867084503173828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1433933004]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433957373.9205811023712158203125;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>32</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>98.99.251.254</wp:comment_author_IP>
    <wp:comment_date>2015-06-10 13:39:11</wp:comment_date>
    <wp:comment_date_gmt>2015-06-10 21:39:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Check out this: http://wp.me/p5eyAn-22]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>31</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1433972351]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433972351.264009952545166015625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1433972351]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>92</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:41</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Using ARAPI.NET from PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189501.525206089019775390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191348]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191348.5755040645599365234375;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Script to list the data fields on a Remedy Form</title>
  <link>https://seanonit.wordpress.com/2014/10/23/script-to-list-the-data-fields-on-a-remedy-form/</link>
  <pubDate>Thu, 23 Oct 2014 23:17:19 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=34</guid>
  <description/>
  <content:encoded><![CDATA[Here is another quick example of using PowerShell to query information from your Remedy server.

When I am developing scripts I end up spending a lot of time in Remedy Developer Studio looking at forms to find the data fields that I am interested in. There are lots of fields on a form and not all can contain data (e.g. label fields among others). It would be nice if there were an easy way to get a list of all of the fields that could contain data without having to poke around in DevStudio. This script will do exactly that.

```powershell
param ($formName = "User",
       $ARServerName = "arserver.calbrosvcs.internal",
       $ARSvcAccount = "Demo",
       $ARSvcPassword = "Password",
       $ARAuthentication = "",
       $ARServerPort = 51100
      )

if ($Env:PROCESSOR_ARCHITECTURE -ne "x86") {
  $powershell=Join-Path $PSHOME.tolower().replace("system32","syswow64") powershell.exe
  "Launching Windows Powershell (x86)..."
  &"$powershell" -NonInteractive -ExecutionPolicy Bypass $myInvocation.Line
}
else {
   # Load the ARAPI.NET classes
   add-type -path 'C:\Program Files (x86)\BMC Software\ARAPI80.NET\BMC.ARSystem.dll'

   # Login to the AR Server
   $arserver = new-object BMC.ARSystem.Server
   $arserver.Login($ARServerName, $ARSvcAccount, $ARSvcPassword, $ARAuthentication, $ARServerPort)

   [BMC.ARSystem.ARForm] $ARForm = $arserver.GetForm($formName)
   "Form Name  = {0}" -f $ARForm.Name
   "Form Type  = {0}" -f $ARForm.GetType()
   "Form Owner = {0}" -f $ARForm.Owner

   $ResultListFields = $ARForm.ResultListFields
   $ResultListFields | %{ $defaultList += ,$_.FieldId }
   $fieldOptions = @{ 1="Required"; 2="Optional"; 3="System"; 4="Display"; 5="Forced"; }

   $fields = $arserver.GetAllFields($formName)
   $fields.keys | sort | %{
      if ($defaultList -contains $_) { $defResult = "*" } else { $defResult = " " }
      [Int32] $op = $fields[$_].FieldOption
      if ($fields[$_].IsDataField()) {
         "[{0:0000000000}] {1} {2,-48} {3,-8} {4}" -f $_, $defResult, $fields[$_].Name, $fieldOptions[$op], $fields[$_].GetType().Name
      }
   }
   $arserver.Logout()
}
```

In this example output the fields shown with an asterisk "*" beside them are the fields returned in the default result set if no field list is specified by the query.

```
Form Name  = User
Form Type  = BMC.ARSystem.RegularForm
Form Owner = ARSERVER
[0000000001]   Request ID                                       System   CharacterField
[0000000002]   Creator                                          Required CharacterField
[0000000003]   Create Date                                      System   DateTimeField
[0000000004]   Assigned To                                      Optional CharacterField
[0000000005]   Last Modified By                                 System   CharacterField
[0000000006]   Modified Date                                    System   DateTimeField
[0000000007] * Status                                           Required SelectionField
[0000000008] * Full Name                                        Required CharacterField
[0000000015]   Status History                                   System   CharacterField
[0000000101] * Login Name                                       Required CharacterField
[0000000102]   Password                                         Optional CharacterField
[0000000103] * Email Address                                    Optional CharacterField
[0000000104]   Group List                                       Optional CharacterField
[0000000108] * Default Notify Mechanism                         Optional SelectionField
[0000000109] * License Type                                     Required SelectionField
[0000000110]   Full Text License Type                           Required SelectionField
[0000000117]   Authentication Login Name                        Optional CharacterField
[0000000119]   Computed Grp List                                Optional CharacterField
[0000000122]   Application License                              Optional CharacterField
[0000000124]   Force Password Change On Login                   Optional SelectionField
[0000000126]   Last Password Change For Policy                  Optional DateTimeField
[0000000127]   Number of Warning Days                           Optional IntegerField
[0000000128]   No. Days Before Expiration                       Optional IntegerField
[0000000129]   zDays Left Before Expiration                     Optional IntegerField
[0000000130]   Account Disabled Date                            Optional DateTimeField
[0000000138]   Disable Password Management                      Optional SelectionField
[0000000139]   Days After Expiration Until Disablement          Optional IntegerField
[0000000179]   Unique Identifier                                Optional CharacterField
[0000060988]   Dynamic Group Access                             Optional CharacterField
[0301600300]   Datatag                                          Optional CharacterField
[0301628560]   Applied PasswordEnforcementEnabled               Optional SelectionField
[0301628561]   Applied Number of Warning Days                   Optional IntegerField
[0301628562]   Applied No. Days before Expiration               Optional IntegerField
[0301628563]   Applied Days After Expiration Until Disablement  Optional IntegerField
[0301628564]   Applied New User Must Change Password            Optional SelectionField
[0301628565]   zPush From Config No Set                         Display  IntegerField
[0304290290]   z1D_Service                                      Display  CharacterField
[0490000000]   Instance ID                                      Optional CharacterField
[0490000100]   Object ID                                        Optional CharacterField
```
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2014-10-23 15:17:19</wp:post_date>
  <wp:post_date_gmt>2014-10-23 23:17:19</wp:post_date_gmt>
  <wp:post_modified>2014-10-23 15:20:09</wp:post_modified>
  <wp:post_modified_gmt>2014-10-23 23:20:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>script-to-list-the-data-fields-on-a-remedy-form</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="arapi"><![CDATA[ARAPI]]></category>
  <category domain="post_tag" nicename="arapi-net"><![CDATA[ARAPI.NET]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="post_tag" nicename="remedy"><![CDATA[Remedy]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/FCXJ3PSQTod]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5931191540872404992&type=U&a=4bef]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>91</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:39</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Script to list the data fields on a Remedy Form [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189499.5303180217742919921875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191348]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191349.3555700778961181640625;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Using PowerShell and EWS to monitor a mailbox</title>
  <link>https://seanonit.wordpress.com/2014/10/29/using-powershell-and-ews-to-monitor-a-mailbox/</link>
  <pubDate>Wed, 29 Oct 2014 20:51:51 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=42</guid>
  <description/>
  <content:encoded><![CDATA[I support a suite of application services that implement our ITIL processes. One of the functions allows users to create trouble tickets by sending a specially crafted email message to a specific email address. The application has a service that polls that mailbox once a minute to retrieve those messages and create new Incidents. Periodically, that email polling service stops working causing messages to queue up in the mailbox. The process is still running and providing other functions but it is no longer processing the inbound messages. We have monitoring on the system to watch that service and alert us when it hangs or crashes. However, since the service is still running, we never get alerted.

I needed another way to monitor for this problem. What if I could create a script that would check the mailbox to see if there were any messages in the Inbox that had arrived more than a few minutes ago? Since the service polled the mailbox every minute, any message more than five minutes old would indicate that the polling service had stopped functioning. But how can you read the Inbox?

In the past, I have used VBScript to automate Outlook and manage email on my desktop. However, I didn't want to install Outlook on the server. Installing Outlook incurs licensing costs and is way more overhead than I really need. That also means that I need to manage patching for Outlook and other Office components on a server which we don't normally do in our environment. Searching the internet I found some scriptable POP3 and IMAP clients. Some were commercial and some open source. But the cost of these options (in money and learning curve) was too high and the supportability was questionable.

We use Microsoft Exchange for our email services. I know that PowerShell is now the preferred method for most management tasks in Exchange. This led me to search for Exchange PowerShell options.

Enter Exchange Web Services (EWS) and its friendly.NET managed API. Installing and using the EWS Managed API is simple. It can be installed on any Windows machine and does not require any other Exchange components. Simply download the MSI package and install it.

<ul>
    <li>Download the Microsoft Exchange Web Services Managed API 2.2 from: <a href="http://www.microsoft.com/en-us/download/details.aspx?id=42951">http://www.microsoft.com/en-us/download/details.aspx?id=42951</a></li>
    <li>See the EWS Managed API reference at: <a href="https://docs.microsoft.com/dotnet/api/microsoft.exchange.webservices.data.emailmessage?view=exchange-ews-api">https://docs.microsoft.com/dotnet/api/microsoft.exchange.webservices.data.emailmessage?view=exchange-ews-api</a></li>
</ul>

I am running this script as a scheduled task on Window Server 2008 R2. The scheduled task runs once per hour and is configured to run with domain credentials that have access to the target mailbox. The script uses EWS to access the mailbox and check for stale messages. It also uses Net.Mail.SmtpClient to send alert messages. I could have used EWS to send the alert message but Net.Mail.SmtpClient is so much easier to use.

[code language="powershell" title="Scan-Mailbox.ps1"]
param($mailboxName = "new-tickets@contoso.com",
$smtpServerName = "smtp.contoso.com",
$emailFrom = "monitorservice@contoso.com",
$emailTo = "support@contoso.com"
)

# Load the EWS Managed API
Add-Type -Path "C:\Program Files\Microsoft\Exchange\Web Services\2.2\Microsoft.Exchange.WebServices.dll"

try {
  $Exchange2007SP1 = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2007_SP1
  $Exchange2010    = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010
  $Exchange2010SP1 = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010_SP1
  $Exchange2010SP2 = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010_SP2
  $Exchange2013    = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2013
  $Exchange2013SP1 = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2013_SP1

  # create EWS Service object for the target mailbox name
  $exchangeService = New-Object -TypeName Microsoft.Exchange.WebServices.Data.ExchangeService -ArgumentList $Exchange2010SP2
  $exchangeService.UseDefaultCredentials = $true
  $exchangeService.AutodiscoverUrl($mailboxName)

  # bind to the Inbox folder of the target mailbox
  $inboxFolderName = [Microsoft.Exchange.WebServices.Data.WellKnownFolderName]::Inbox
  $inboxFolder = [Microsoft.Exchange.WebServices.Data.Folder]::Bind($exchangeService,$inboxFolderName)

  # Optional: reduce the query overhead by viewing the inbox 10 items at a time
  $itemView = New-Object -TypeName Microsoft.Exchange.WebServices.Data.ItemView -ArgumentList 10
  # search the mailbox for messages older than 15 minutes
  $dateTimeItem = [Microsoft.Exchange.WebServices.Data.ItemSchema]::DateTimeReceived
  $15MinutesAgo = (Get-Date).AddMinutes(-15)
  $searchFilter = New-Object -TypeName Microsoft.Exchange.WebServices.Data.SearchFilter+IsLessThanOrEqualTo -ArgumentList $dateTimeItem,$15MinutesAgo
  $foundItems = $exchangeService.FindItems($inboxFolder.Id,$searchFilter,$itemView)

  # report the results via email and Application event log
  $entryType = "Information"
  $messageBody = "Self-service mailbox scan completed at {0}.`r`n" -f (get-date -format "MM/dd/yyyy hh:mm:ss")
  if ($foundItems.TotalCount -ne 0) {
  $entryType = "Warning"
  $subject = "Self-service mailbox hung"
  $messageBody  = "Inbox has {0} message(s) that are more than 15 minutes old.`r`n" -f $foundItems.TotalCount
  $messageBody += "Inbox has {0} message(s) total.`r`n`r`n" -f $inboxFolder.TotalCount
  $messageBody += "Please restart the Email Engine on SERVER01`r`n"
  $messageBody += "Self-service mailbox scan completed at {0}.`r`n" -f (get-date -format "MM/dd/yyyy hh:mm:ss")
  $messageBody += "Script run from $env:computername`r`n"
  $smtpClient = New-Object -TypeName Net.Mail.SmtpClient -ArgumentList $smtpServerName
  $smtpClient.Send($emailFrom, $emailTo, $subject, $messageBody)
  }
  Write-EventLog -LogName "Application" -Source "Application" -EventId 1 -Category 4 -EntryType $entryType -Message $messageBody
}
catch
{
  $entryType = "Error"
  $subject = "Error in mailbox monitor script"
  $messageBody = "{0}`r`n{1}" -f $_.Exception.Message,$_.InvocationInfo.PositionMessage
  Write-EventLog -LogName "Application" -Source "Application" -EventId 1 -Category 4 -EntryType $entryType -Message $messageBody
  $smtpClient = New-Object -TypeName Net.Mail.SmtpClient -ArgumentList $smtpServerName
  $smtpClient.Send($emailFrom, $emailTo, $subject, $messageBody)
}
```]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2014-10-29 12:51:51</wp:post_date>
  <wp:post_date_gmt>2014-10-29 20:51:51</wp:post_date_gmt>
  <wp:post_modified>2020-03-16 11:30:39</wp:post_modified>
  <wp:post_modified_gmt>2020-03-16 19:30:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-powershell-and-ews-to-monitor-a-mailbox</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ews"><![CDATA[ews]]></category>
  <category domain="post_tag" nicename="exchange-web-services"><![CDATA[exchange web services]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="category" nicename="scripting"><![CDATA[Scripting]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/Lt5qatRBKVi]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5933329195047337984&type=U&a=yoJh]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_39111a366fe9829212801685ea367f51</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_af8e3777f48ea668bbbeac86b32a794f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_720fd58607ed792661c71aa0ee605a8b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1bdfe3493b47bc7555cf1debf95d01b2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27350394078]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>20</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>98.99.251.254</wp:comment_author_IP>
    <wp:comment_date>2015-03-04 09:42:30</wp:comment_date>
    <wp:comment_date_gmt>2015-03-04 17:42:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Alan,
$smtpServerName is one of the command line parameters defined on Line 2 of the script. You can pass a value via the command line or use the default value as defined in the script.

The "4.3.2 Service not available" response is likely a permissions issue. Your SMTP server may not allow anonymous senders so you will have to provide credentials. See the documentation: https://msdn.microsoft.com/en-us/library/system.net.mail.smtpclient.credentials(v=vs.110).aspx

But that is all for sending email. If you just want to read the contents of a mailbox and report on senders and subjects then you don't need to use system.net.mail.smtpclient at all.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>18</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[7643150232]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1425490950]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1425490950]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425490950.33524799346923828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>26</wp:comment_id>
    <wp:comment_author><![CDATA[Alan]]></wp:comment_author>
    <wp:comment_author_email>aboba@pcasupport.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.105.145.11</wp:comment_author_IP>
    <wp:comment_date>2015-04-06 08:25:32</wp:comment_date>
    <wp:comment_date_gmt>2015-04-06 16:25:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It's working! Thanks for your help (and others). Still more to learn like why when using EWS the "Sender" is blank but if I use Microsoft.Office.Interop.Outlook and connect to Outlook the sender has the expected info.

Anyway, here's the working code for anyone who's interested...
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Read from Inbox of mail account designated on command line.
## Must know credential fro mailbox.
## If wish to change date range need to change around line 99
## Output file defined around line 123

## Get the Mailbox to Access from the 1st commandline argument

$MailboxName = $args[0]

## Load Managed API dll
###CHECK FOR EWS MANAGED API, IF PRESENT IMPORT THE HIGHEST VERSION EWS DLL, ELSE EXIT
$EWSDLL = (($(Get-ItemProperty -ErrorAction SilentlyContinue -Path Registry::$(Get-ChildItem -ErrorAction SilentlyContinue -Path 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Exchange\Web Services'|Sort-Object Name -Descending| Select-Object -First 1 -ExpandProperty Name)).'Install Directory') + "Microsoft.Exchange.WebServices.dll")
if (Test-Path $EWSDLL)
    {
    Import-Module $EWSDLL
    }
else
    {
    "$(get-date -format yyyyMMddHHmmss):"
    "This script requires the EWS Managed API 1.2 or later."
    "Please download and install the current version of the EWS Managed API from"
    "http://go.microsoft.com/fwlink/?LinkId=255472"
    ""
    "Exiting Script."
    exit
    }

## Set Exchange Version
$ExchangeVersion = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010_SP2

## Create Exchange Service Object
$service = New-Object Microsoft.Exchange.WebServices.Data.ExchangeService($ExchangeVersion)

## Set Credentials to use two options are availible Option1 to use explict credentials or Option 2 use the Default (logged On) credentials

#Credentials Option 1 using UPN for the windows Account
$psCred = Get-Credential
$creds = New-Object System.Net.NetworkCredential($psCred.UserName.ToString(),$psCred.GetNetworkCredential().password.ToString())
$service.Credentials = $creds
#Credentials Option 2
#service.UseDefaultCredentials = $true

## Choose to ignore any SSL Warning issues caused by Self Signed Certificates

## Code From http://poshcode.org/624
## Create a compilation environment
$Provider=New-Object Microsoft.CSharp.CSharpCodeProvider
$Compiler=$Provider.CreateCompiler()
$Params=New-Object System.CodeDom.Compiler.CompilerParameters
$Params.GenerateExecutable=$False
$Params.GenerateInMemory=$True
$Params.IncludeDebugInformation=$False
$Params.ReferencedAssemblies.Add("System.DLL") | Out-Null

$TASource=@'
  namespace Local.ToolkitExtensions.Net.CertificatePolicy{
    public class TrustAll : System.Net.ICertificatePolicy {
      public TrustAll() {
      }
      public bool CheckValidationResult(System.Net.ServicePoint sp,
        System.Security.Cryptography.X509Certificates.X509Certificate cert,
        System.Net.WebRequest req, int problem) {
        return true;
      }
    }
  }
'@
$TAResults=$Provider.CompileAssemblyFromSource($Params,$TASource)
$TAAssembly=$TAResults.CompiledAssembly

## We now create an instance of the TrustAll and attach it to the ServicePointManager
$TrustAll=$TAAssembly.CreateInstance("Local.ToolkitExtensions.Net.CertificatePolicy.TrustAll")
[System.Net.ServicePointManager]::CertificatePolicy=$TrustAll

## end code from http://poshcode.org/624

## Set the URL of the CAS (Client Access Server) to use two options are availbe to use Autodiscover to find the CAS URL or Hardcode the CAS to use

#CAS URL Option 1 Autodiscover
$service.AutodiscoverUrl($MailboxName,{$true})
"Using CAS Server : " + $Service.url


# Bind to the Inbox
$folderid= new-object Microsoft.Exchange.WebServices.Data.FolderId([Microsoft.Exchange.WebServices.Data.WellKnownFolderName]::Inbox,$MailboxName)
$MailboxRoot= new-object Microsoft.Exchange.WebServices.Data.FolderId([Microsoft.Exchange.WebServices.Data.WellKnownFolderName]::MsgFolderRoot,$MailboxName)
$InboxFolder= [Microsoft.Exchange.WebServices.Data.Folder]::Bind($service,$folderid)

#Define Date to Query
$StartDate = [system.DateTime]::Today.AddDays(-14)
$EndDate = [system.DateTime]::Today.AddDays(1)

# Create the search filter
$Sfgt = new-object Microsoft.Exchange.WebServices.Data.SearchFilter+IsGreaterThan([Microsoft.Exchange.WebServices.Data.ItemSchema]::DateTimeReceived, $StartDate)
$Sflt = new-object Microsoft.Exchange.WebServices.Data.SearchFilter+IsLessThan([Microsoft.Exchange.WebServices.Data.ItemSchema]::DateTimeReceived, $EndDate)
$sfCollection = new-object Microsoft.Exchange.WebServices.Data.SearchFilter+SearchFilterCollection([Microsoft.Exchange.WebServices.Data.LogicalOperator]::And);
$sfCollection.add($Sfgt)
$sfCollection.add($Sflt)

# Perform the search
$view = new-object Microsoft.Exchange.WebServices.Data.ItemView(5000)
$frFolderResult = $InboxFolder.FindItems($sfCollection,$view)

# Write output to file
$frFolderResult | Select-Object -Property DateTimeReceived, LastModifiedName, Subject | Export-Csv -Path "c:\temp\$MailboxName-Inbox.csv"

Exit]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1428337533.2596700191497802734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[9200605928]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1428361579]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1428361579]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1428342703.4507110118865966796875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1428361579.88144588470458984375;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>50.135.109.51</wp:comment_author_IP>
    <wp:comment_date>2015-01-13 18:59:47</wp:comment_date>
    <wp:comment_date_gmt>2015-01-14 02:59:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Vinodh,
Take a look at the EAS Managed API reference (linked in the original article). In line 33 of my script I use the FindItems method to get all of the items in the Inbox. This will return a collection of EmailMessage items. From there you can look at the Subject property of each item to find the messages you are interested in.

See http://msdn.microsoft.com/en-us/library/microsoft.exchange.webservices.data.emailmessage_members(v=exchg.80).aspx for more info.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[5595621054]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1421204387]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421204387]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421204387.422512054443359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Vinodh]]></wp:comment_author>
    <wp:comment_author_email>avinodh.ajr@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>168.189.8.1</wp:comment_author_IP>
    <wp:comment_date>2015-01-13 06:42:19</wp:comment_date>
    <wp:comment_date_gmt>2015-01-13 14:42:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Sean wheeler,

Thanks for your script. I really appreciate your work.

I am trying to use this script by adding some stile modifications to it. My requirement is to monitoring a specific email notification(email sub: Task failed) received to my team DL &then write it to a log file.Through this i'll monitor the log file with a specific pattern &trigger an alarm. please help me as to what changes need be made on the script to achieve my requirement.

Regards,
Vinodh]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1421160139]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[5595264350]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421164969.6742980480194091796875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1421203610]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421203610]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421203610.4301269054412841796875;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421160139.44423198699951171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[vel]]></wp:comment_author>
    <wp:comment_author_email>velscm@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>116.50.59.180</wp:comment_author_IP>
    <wp:comment_date>2015-01-21 03:53:50</wp:comment_date>
    <wp:comment_date_gmt>2015-01-21 11:53:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Sean,
Thanks for the script. Even I'm looking for a solution to create tickets when a mail is sent to a particular email ID in specific format. can you please share that script as well?
Vel]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421841230.3915860652923583984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[5912425718]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1421890627]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421890627]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421846118.528934001922607421875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421890627.7397758960723876953125;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[Alan]]></wp:comment_author>
    <wp:comment_author_email>aboba@pcasupport.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.105.145.11</wp:comment_author_IP>
    <wp:comment_date>2015-03-03 13:08:47</wp:comment_date>
    <wp:comment_date_gmt>2015-03-03 21:08:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sean,

Hope someday things are "that easy" for me. Right now not the case.

After installing EWS I got the following when running the script...
Exception calling "Send" with "4" argument(s): "The SMTP host was not specified."

Didn't see $smtpServerName getting assigned anywhere so changed it to a literal.

Now I'm getting...
Exception calling "Send" with "4" argument(s): "Service not available, closing transmission channel. The server response was: 4.3.2 Service not available"

Now I'm stumped. Would appreciate any clues including other references and other ways to approach the problem.

Problem is, for a general mailbox need to:
1. identify all unique senders
2. unique subjects currently being sent by any sender

The inbox gets automated messages and the sources have not been reliably recorded for a while. I'm being asked to figure it out and powershell seems to me the way to go rather than copy paste to create the list and maybe missing some senders or messages. To say nothing of the effort.

Thank you for any suggestions.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425416928.446115016937255859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1425490212]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425490212.991324901580810546875;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425421485.7760589122772216796875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1425490212]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[7642728105]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>17</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>98.99.251.254</wp:comment_author_IP>
    <wp:comment_date>2015-01-29 12:55:33</wp:comment_date>
    <wp:comment_date_gmt>2015-01-29 20:55:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Vel,
Creating a script like that would not be very difficult but it will be different for every ticketing system out there. Knowing and coding for the requirements of your ticket system is the hard part. Getting the data from the email message is easy. You just access the Body property of the EmailMessage item.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>14</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1422564933]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422564933.164402008056640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[6193277719]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1422564933]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[Alan]]></wp:comment_author>
    <wp:comment_author_email>aboba@pcasupport.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.105.145.11</wp:comment_author_IP>
    <wp:comment_date>2015-03-04 11:22:18</wp:comment_date>
    <wp:comment_date_gmt>2015-03-04 19:22:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello Sean,

Thanks for your follow up.

You're correct I don't need to send. I've been searching for scripts and trying various ones to perform reading the inbox and producing a list of unique sender/subject pairs.

Yours is the script that produced the fewest errors of the ten or so I tried so I figured it would be the best place to start trying to produce my unique sender/subject listing.

Since your reply was sent I've made modifications to your scripts as below. Output is always the same and always appear to be produced by the catch statement even though all the variables appear to have values so it doesn't seem there should be an error causing catch to be entered.

Any hints you can offer and references you can direct me toward would be much appreciated.

NOTE: Output is the same results regardless which $Exchange variable is used.

# Load the EWS Managed API
Add-Type -Path "C:\Program Files\Microsoft\Exchange\Web Services\2.2\Microsoft.Exchange.WebServices.dll"

try {
  $Exchange2007SP1 = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2007_SP1
  $Exchange2010    = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010
  $Exchange2010SP1 = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010_SP1
  $Exchange2010SP2 = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010_SP2
  $Exchange2013    = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2013
  $Exchange2013SP1 = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2013_SP1

  # create EWS Service object for the target mailbox name
  $exchangeService = New-Object -TypeName Microsoft.Exchange.WebServices.Data.ExchangeService -ArgumentList $Exchange2013SP1
  $exchangeService.UseDefaultCredentials = $true
# actual email is used below when running the script
  $exchangeService.AutodiscoverUrl("@.com")

  # bind to the Inbox folder of the target mailbox
  $inboxFolderName = [Microsoft.Exchange.WebServices.Data.WellKnownFolderName]::Inbox
  $inboxFolder = [Microsoft.Exchange.WebServices.Data.Folder]::Bind($exchangeService,$inboxFolderName)

  $itemView = New-Object -TypeName Microsoft.Exchange.WebServices.Data.ItemView

  Write-Output $inboxFolderName, $inboxFolder, $itemView
}
catch
{
  Write-Output "Catch-statement", ""$"inboxFolderName***", $inboxFolderName, ""$"inboxFolder***", $inboxFolder, ""$"itemView***", $itemView
}

Output is always....
Catch-statement

$inboxFolderName***
Inbox

$inboxFolder***


Id                       : AAMkADkwMTk1Y2Q1LWIzMWQtNDFlMy1iZDg4LWY2NzFlYWRiNjU0
                           OAAuAAAAAAAcli98zl8yRLNllnTgFtiqAQB0018l56k/SrSrIB7R
                           wv2RAAAAFN+WAAA=
ParentFolderId           : AAMkADkwMTk1Y2Q1LWIzMWQtNDFlMy1iZDg4LWY2NzFlYWRiNjU0
                           OAAuAAAAAAAcli98zl8yRLNllnTgFtiqAQB0018l56k/SrSrIB7R
                           wv2RAAAAFN+TAAA=
ChildFolderCount         : 0
DisplayName              : Inbox
FolderClass              : IPF.Note
TotalCount               : 9
ExtendedProperties       : {}
ManagedFolderInformation :
EffectiveRights          : CreateAssociated, CreateContents, CreateHierarchy,
                           Delete, Modify, Read
Permissions              : {Microsoft.Exchange.WebServices.Data.UserId,
                           Microsoft.Exchange.WebServices.Data.UserId}
UnreadCount              : 1
PolicyTag                :
ArchiveTag               :
WellKnownFolderName      :
Schema                   : {Id, ParentFolderId, FolderClass, DisplayName...}
Service                  : Microsoft.Exchange.WebServices.Data.ExchangeService
IsNew                    : False
IsDirty                  : False


$itemView***
Traversal       : Shallow
OrderBy         : {}
PageSize        : 10
OffsetBasePoint : Beginning
Offset          : 0
PropertySet     :]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>20</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1425496940]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425496941.1881771087646484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[7646575618]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1425496941]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>22</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>98.99.251.254</wp:comment_author_IP>
    <wp:comment_date>2015-03-09 13:46:17</wp:comment_date>
    <wp:comment_date_gmt>2015-03-09 21:46:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Alan, since the output you are getting is coming from the Catch block that tells me that an exception occurred. You need to look at the exception to see what is happening. But there are a couple of things I could point to that need attention. First "@.com" does not look like a valid mailbox for Exchange autodiscovery. Second, is an ItemView object represents the view settings in a folder search operation. But you are not executing a FindItems() query.

But focus on the exception that is occurring. That will really help you understand where the code is failing.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>21</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1425937577]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425937577.406733989715576171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[7865136911]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1425937577]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>23</wp:comment_id>
    <wp:comment_author><![CDATA[Alan]]></wp:comment_author>
    <wp:comment_author_email>aboba@pcasupport.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.105.145.11</wp:comment_author_IP>
    <wp:comment_date>2015-03-13 13:10:20</wp:comment_date>
    <wp:comment_date_gmt>2015-03-13 21:10:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sean, thanks again for continuing to help.

You might have guessed "@.com" is an obfuscated email to avoid posting a live email. If you guessed that you were right. There's a correct email in the development code.

Since the catch was running and all the variables appeared to have values, including the last one before the catch statement, I was stumped how to identify what might be causing the error.

Took out the catch statement and its code and ran the script again. This caused an error to display in the terminal.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
New-Object : A constructor was not found. Cannot find an appropriate
constructor for type Microsoft.Exchange.WebServices.Data.ItemView.
At H:\Alan's docs\readoutlook3_wEWS.ps1:20 char:15
+   $itemView = New-Object -TypeName
Microsoft.Exchange.WebServices.Data.ItemView
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I searched the error and looked up the ItemView class and haven't yet found anything that helped me understand where that last statement is coming up short.

I'm also working on another tack, using Powershell Outlook cmdlets to query the Inbox. So far I can query my Inbox but not the target Inbox.

I'll get it sooner or later. Hoping for sooner. For now it's a contest between my head and the wall.

~~~~~~~~~~~~alternate code that's reading my Inbox~~~~~~~~~~~~
Add-type -assembly "Microsoft.Office.Interop.Outlook" | out-null
$olFolders = "Microsoft.Office.Interop.Outlook.olDefaultFolders" -as [type]
$outlook = new-object -comobject outlook.application
$namespace = $outlook.GetNameSpace("MAPI")
$folder = $namespace.getDefaultFolder($olFolders::olFolderInBox)
$folder.items |  Select-Object -Property SenderName, SenderEmailAddress, Subject]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>22</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1426281022]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1426281022.9759349822998046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8044854394]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1426281023]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>24</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>98.99.251.254</wp:comment_author_IP>
    <wp:comment_date>2015-03-18 07:49:00</wp:comment_date>
    <wp:comment_date_gmt>2015-03-18 15:49:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[See http://wp.me/p5eyAn-1E]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>23</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1426693740]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1426693740.973805904388427734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8285077336]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1426693740]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>25</wp:comment_id>
    <wp:comment_author><![CDATA[Alan]]></wp:comment_author>
    <wp:comment_author_email>aboba@pcasupport.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.105.145.11</wp:comment_author_IP>
    <wp:comment_date>2015-03-19 10:21:02</wp:comment_date>
    <wp:comment_date_gmt>2015-03-19 18:21:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you, thank you, thank you Sean!

I have access and am reading the mailbox after a few tweaks to the script in the last link you provided.

Now need to make some more tweaks

- filter the $itemlist by date to limit what's returned
- figure out how to provide credential beside my own
I'm logging in with the account that owns the mailbox (because of $service.UseDefaultCredentials = $true I expect)

and the script will be where it needs to be. I'll own that and post back when I figure it out.

Would not have gotten to this point without your help.

Thank you again.

-Alan]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>24</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8356117263]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1426816485]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1426816350.995997905731201171875;s:7:"message";s:48:"swsamwa changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1426816485.91705608367919921875;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1426789264]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1426789265.5364410877227783203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>99.178.142.127</wp:comment_author_IP>
    <wp:comment_date>2015-04-07 04:42:09</wp:comment_date>
    <wp:comment_date_gmt>2015-04-07 12:42:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Try calling the Load() method on each item in $frFolderResult to get the sender info. The properties of the items are not fully populated until you load them.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>26</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1428410529]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1428410529.447431087493896484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[9226875592]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1428410529]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28</wp:comment_id>
    <wp:comment_author><![CDATA[Alan]]></wp:comment_author>
    <wp:comment_author_email>aboba@pcasupport.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.105.145.11</wp:comment_author_IP>
    <wp:comment_date>2015-04-14 09:55:41</wp:comment_date>
    <wp:comment_date_gmt>2015-04-14 17:55:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Slowly but surely.

Took a while to figure out how to "...calling the Load() method on each item in $frFolderResult...". So simple once I found the answer.

$frFolderResult | ForEach {$_.Load()}

My modified output is now...
$frFolderResult | Select-Object -Property DateTimeReceived, LastModifiedName, Sender, SenderName, From, Subject

Not quite there yet. For whatever reason one column, SenderName, isn't populating.

Haven't gone back to the output produced when Microsoft.Office.Interop.Outlook was used so haven't verified that I tried SenderName with that. However I do remember all fields were populated when using that technique.

Might not really need SenderName but at minimum I should see if the other method populated the field and then understand why this method isn't.

More digging.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[9544340060]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429041183.21566295623779296875;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1429041183]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429041180.132237911224365234375;s:7:"message";s:48:"swsamwa changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1429034143]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429034143.7679378986358642578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>72</wp:comment_id>
    <wp:comment_author><![CDATA[Anthony]]></wp:comment_author>
    <wp:comment_author_email>aburrow@csu.edu.au</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>203.40.109.171</wp:comment_author_IP>
    <wp:comment_date>2016-07-18 03:57:21</wp:comment_date>
    <wp:comment_date_gmt>2016-07-18 11:57:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Is it possible to modify the script to monitor multiple mailbox's and to send the results as 1 email?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1468852119.271541118621826171875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1468852118]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[24898485428]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1468847746.4809970855712890625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1468852118]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1468843043.2764739990234375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>73</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>131.107.147.151</wp:comment_author_IP>
    <wp:comment_date>2016-07-18 06:31:21</wp:comment_date>
    <wp:comment_date_gmt>2016-07-18 14:31:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, it is possible. You would just need to bind to each mailbox, iteratively, and check the contents. You would need the proper credentials to connect to each mailbox. It would be easier if you had a "service" account that had rights to all of the mailboxes. Then you configure the scheduled task to run as that one account. This would allow you to use default credentials in the script and not have to embed the username and password in the script.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>72</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1468852282]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1468852282.8984210491180419921875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1468852283]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[24898560181]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>86</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:28</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Using PowerShell and EWS to monitor a mailbox [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189488.1646549701690673828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191232]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191233.52037811279296875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>107</wp:comment_id>
    <wp:comment_author><![CDATA[Tom K.]]></wp:comment_author>
    <wp:comment_author_email>tom.kostiainen@andritz.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>194.252.180.30</wp:comment_author_IP>
    <wp:comment_date>2017-01-02 00:20:00</wp:comment_date>
    <wp:comment_date_gmt>2017-01-02 08:20:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Alan, did you ever find a solution to the "constructor not found" error? I'm having the same problem.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[326457285]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1483349302.6227550506591796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1483345201.811336994171142578125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1483373437]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1483373437]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1483373438.2893829345703125;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>98</wp:comment_id>
    <wp:comment_author><![CDATA[BB]]></wp:comment_author>
    <wp:comment_author_email>brandy.davis@mail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>137.152.0.16</wp:comment_author_IP>
    <wp:comment_date>2016-10-20 11:50:51</wp:comment_date>
    <wp:comment_date_gmt>2016-10-20 19:50:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am trying to use this script but it keeps telling me there are 38 messages in the inbox when there is actually 0. What am I missing?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[28061167480]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1477001552]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1477001553]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1477001553.52433109283447265625;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1476997747.50940608978271484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1476993052.643189907073974609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>99</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>167.220.59.28</wp:comment_author_IP>
    <wp:comment_date>2016-10-20 14:13:57</wp:comment_date>
    <wp:comment_date_gmt>2016-10-20 22:13:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You had to change something to make it run in your environment. I can't tell you what went wrong without more info.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>98</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1477001638]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[28061201102]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1477001639]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1477001638.6595790386199951171875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>131</wp:comment_id>
    <wp:comment_author><![CDATA[Auto forward Azure Voicemail messages |]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://realtimeuc.com/2017/04/auto-forward-azure-voicemail-messages/</wp:comment_author_url>
    <wp:comment_author_IP>50.6.77.68</wp:comment_author_IP>
    <wp:comment_date>2017-04-14 17:14:26</wp:comment_date>
    <wp:comment_date_gmt>2017-04-15 01:14:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] query the mailbox using EWS and forward the messages along to the agents. Some Google-fu and found: https://seanonit.wordpress.com/2014/10/29/using-powershell-and-ews-to-monitor-a-mailbox/. That lasted about a minute before Azure popped in my [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1492218867.0784900188446044921875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1492220890]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1492220891.036159038543701171875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>445</wp:comment_id>
    <wp:comment_author><![CDATA[Connor]]></wp:comment_author>
    <wp:comment_author_email>connorwilliams1@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>140.192.89.75</wp:comment_author_IP>
    <wp:comment_date>2018-10-02 11:56:48</wp:comment_date>
    <wp:comment_date_gmt>2018-10-02 19:56:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Sean,

Thanks for this post, it is helpful for me to see how this application works, it gives me some further insight into a project I am currently working on myself.  I'm currently trying to use the EWS managed API to take logged OWA ID's and use those ID's to pull a subject line of an email.  I've had a lot of employees that have had their accounts compromised due to phishing, and have been able to identify the illegitimate access in our logs, as well as the OWA ID that is correlated with that, so the end goal is to be able to pull those ID's, and then be able to find what was viewed for proper disclosure to the victim phishing attack, however, I'm wondering if this is something that the EWS managed API is able to complete, or if I'm missing some pieces to make this sort of correlation.   All I have to go on is the OWA ID, and initially, upon suggestion by the exchange administrators, I  successfully made the conversion from the OWA ID to EWS ID, in hopes that they could tie that ID to a specific email object, however, it appears there is more to binding this items ID to pull the subject line than I am understanding.

Thanks for your time.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22774752227]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1538513838.487879;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1538521840]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1538521840]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1538521841.16481;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1538510209.709664;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>199</wp:comment_id>
    <wp:comment_author><![CDATA[Mike]]></wp:comment_author>
    <wp:comment_author_email>mpinon@medline.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>205.233.244.5</wp:comment_author_IP>
    <wp:comment_date>2017-12-11 08:43:53</wp:comment_date>
    <wp:comment_date_gmt>2017-12-11 16:43:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Im trying to filter on more than one paramter. The one you gave as an example in your script + Email = Unread. I cannot figure out the syntax of this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1513010635.0053369998931884765625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[12394842192]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1513011437]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1513011438]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1513011438.50006008148193359375;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Throwback Thursday - Windows IT Pro Magazine</title>
  <link>https://seanonit.wordpress.com/2014/10/30/throwback-thursday-windows-it-pro-magazine/</link>
  <pubDate>Thu, 30 Oct 2014 15:42:41 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=45</guid>
  <description/>
  <content:encoded><![CDATA[A few years ago I had an opportunity to contribute articles to Windows IT Pro Magazine (now known as ITPro Today). The articles are still available online.

Monitor System Startup Performance in Windows 7
Jul. 26, 2010 | <a href="https://www.itprotoday.com/windows-78/monitor-system-startup-performance-windows-7">https://www.itprotoday.com/windows-78/monitor-system-startup-performance-windows-7</a>

An Easier Way to View Incoming WMI Queries
Sep. 24, 2010 | <a href="https://www.itprotoday.com/windows-78/easier-way-view-incoming-wmi-queries">https://www.itprotoday.com/windows-78/easier-way-view-incoming-wmi-queries</a>

Reap the Power of MPS_Reports Data
Mar. 23, 2009 | <a href="https://www.itprotoday.com/cloud-computing/reap-power-mpsreports-data">https://www.itprotoday.com/cloud-computing/reap-power-mpsreports-data</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>2014-10-30 07:42:41</wp:post_date>
  <wp:post_date_gmt>2014-10-30 15:42:41</wp:post_date_gmt>
  <wp:post_modified>2020-03-16 11:28:28</wp:post_modified>
  <wp:post_modified_gmt>2020-03-16 19:28:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>throwback-thursday-windows-it-pro-magazine</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="mps-reports"><![CDATA[MPS Reports]]></category>
  <category domain="post_tag" nicename="tbt"><![CDATA[TBT]]></category>
  <category domain="category" nicename="throwback-thursday"><![CDATA[Throwback Thursday]]></category>
  <category domain="post_tag" nicename="wmi"><![CDATA[WMI]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/5wGd6NQ2N2q]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5933613775092465664&type=U&a=9WBc]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bf8ebd6f37c299269eb8f3d64d79a4a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_abab8e75b4e8a7cbc6c61e00aec01395</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a2a7b7a6f774a01339efee7e2bb6841e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c17c7e18fed5d7dffcd62cce2e05f59c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f566158ed202aec95eac2eefa146a94b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_41e007170501327c85891f531cc10c50</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[41862905563]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Working with certificates in PowerShell</title>
  <link>https://seanonit.wordpress.com/2014/11/03/working-with-certificates-in-powershell/</link>
  <pubDate>Tue, 04 Nov 2014 00:27:22 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=47</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Overview</h1>

Today's script is an attempt to bring together several things I have learned about writing good PowerShell scripts. I still have a lot to learn and this is not necessarily a sterling example of best practices. However, it does illustrate some more advanced scripting topics, including:

<ul>
    <li>Comment-based help</li>
    <li>Parameter sets</li>
    <li>Parameters passing on the pipeline</li>
    <li>Error handling with try-catch blocks</li>
    <li>Simple HTTP downloads using System.Net.Webclient</li>
    <li>Inspecting certificates imported from external sources (http or file)</li>
    <li>Inspecting certificates in the local store</li>
</ul>

I rarely use comment-based help in my scripts since I am usually writing scripts for my own use. They tend to be one-off utilities designed to fulfill an immediate need. This script, however, is going to be used by other support technicians outside of my immediate team. So documentation was important. Comment-based help allows you to include documentation in the script (rather than a separate file that can get lost or out of date). And it gives help in a format that users expect for any other PowerShell command.

Parameter handling in PowerShell is extremely versatile. Through the advanced parameter options, you can create parameter sets, specify which parameters are mandatory, perform data validation, define input from the pipeline, and much more. All of this controlled via parameter definition. No need to write code to validate parameters or ensure valid parameter combinations. PowerShell does the heavy lifting for you.

My focus will be on the certificate management portions of the script and to outline the scenario that this script is attempting to support.

<h1>The Scenario</h1>

We have a set of devices that require a device-specific certificate to be installed. We have a scripted process for creating, publishing, and installing these certificates. The certificates are created in bulk for a large number of devices. These certificates are then exported to PFX files copied to a folder shared by a web server. The device can then download the PFX file and import it into local certificate store on the device. The devices and the certificates have a standardized naming scheme (e.g. DEV###). This makes it easy to identify which certificate belongs to which device.

The certificate lifecycle an unmanaged process. There is no policy mechanism to ensure that the device has installed the proper certificate or that the certificate installed is correct and valid. Occasionally we can have problems where the installed certificate is not working properly or the PFX file published to the web server does not match the certificated issued by the CA. To troubleshoot these issues we need to be able to verify the certificates on the device in PFX files published on the web server.

<h1>The solution</h1>

This script looks for certificates in one of three locations: the certificate broker (web server), the local certificate store, or PFX files stored in the file system. In all cases, the output is the same for each certificate found. The script displays some basic information about the certificate and then checks that each certificate in the validity chain is still valid.

<h3>Example 1 - check the published PFX file for a device</h3>

This was the first scenario I needed to solve for. The script takes the specified device name and attempts to download the matching PFX file from the certificate broker.

```
PS C:\> .\check-devicecert.ps1 -devices DEV101
```

You can specify one or more device IDs as an array of strings.

<h3>Example 2 - search for the device certificate in the local store</h3>

The script takes the specified device name and searches for a certificate with a matching Subject name in the local certificate store.

```
PS C:\> .\check-devicecert.ps1 -devices DEV101 -local
```

You can specify one or more device IDs as an array of strings.

<h3>Example 3 - load a PFX file from disk</h3>

The script loads the specified PFX file(s) from disk.

```
PS C:\> .\check-devicecert.ps1 -pfxfilename .\DEV113.pfx
PS C:\> dir *.pfx | .\check-devicecert.ps1
```

You can specify one or more PFX filenames as an array of strings. You can also pass an array of files on the pipeline.

For examples #1 and #3 we are working with PFX files. The first step is to obtain the contents of the PFX file as an array of bytes so that we can create an X.509 certificate object. To download the PFX file from the certificate broker we do the following:

```powershell
$client = New-Object -TypeName System.Net.WebClient
$url = "https://certbroker.contoso.com/pfxshare/$($num).pfx"
$pfxBytes = $client.DownloadData($url)
```

The DownloadData() method of System.Net.WebClient does this nicely for us.

To load a PFX file from disk I use the Get-Content cmdlet and specify that I want Byte encoding.

```powershell
$pfxBytes = Get-Content -path $file -encoding Byte -ErrorAction:SilentlyContinue
if ($error.count -ne 0) {throw $error}
```

Also, note the <strong>ErrorAction</strong> parameter. For some reason, exceptions occurring inside of <strong>Get-Content</strong> were not being caught by my Try-Catch block. I had to override the ErrorAction to force <strong>Get-Content</strong> to continue silently, check to see if an error occurred, then re-throw the exception so that it would get caught by my Try-Catch block.

Once I had the Byte array containing the PFX-formatted data blob I needed to import it into an X.509 certificate object.

```powershell
function import-pfxbytes {
  param($pfxBytes)
  ## Import cert into a new object. No need to import it into a certificate device.
  $pfxPass = 'pFxP@$5w0rd'
  $X509Cert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2
  $X509Cert.Import([byte[]]$pfxBytes, $pfxPass,"Exportable,PersistKeySet")
  return $X509Cert
}
```

The <strong>import-pfxbytes</strong> creates an empty X.509 certificate and imports the data using a static password and returns a certificate object. In this case, I have hard-coded the password. For better security, you should prompt the user to enter a password (for example, using <strong>Read-Host -AsSecureString</strong>).

For example #2 I am using PowerShell's built-in provider to access the local certificate store. With this access method, you receive a certificate object, not a PFX-formatted data blob. Once I have an X.509 certificate object I pass it to <strong>show-certinfo</strong> to inspect the important properties and verify the validity of the trust chain.

[code language="powershell" title="Check-DeviceCert.ps1"]
<#
.SYNOPSIS
Checks a device certificate for validity.

.DESCRIPTION
The script downloads a device certificate PFX file from the cert broker or reads an existing PFX file then checks for the validity.

.PARAMETER devices
An array of device numbers .PARAMETER local Indicates that you want to search the local certificate device.

.PARAMETER pfxfiles
An array of pathnames to PFX files deviced on disk. .INPUTS You can provide an array of PFX file names in the pipeline.

.EXAMPLE
PS C:\> .\check-devicecert.ps1 -devices DEV101
    ==================================================
    Downloading DEV101.pfx

    Subject      : CN=DEV101@contoso.com
    Issuer       : CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    NotBefore    : 5/2/2013 12:39:58 PM
    NotAfter     : 5/1/2017 12:39:58 PM
    SerialNumber : 27DC85E200060000B6D2

    Validating certficate chain...

    Valid   Certificate
    -----   -----------
    True    CN=DEV101@contoso.com
    True    CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    True    CN=Contoso Corporate Root CA, O=CONTOSO
    ==================================================

The example above illustrates downloading the PFX file from the certificate broker and check the validity.
.EXAMPLE
PS C:\> .\check-devicecert.ps1 -devices DEV369,DEV123
    ==================================================
    Downloading DEV369.pfx

    Subject      : CN=DEV369@contoso.com
    Issuer       : CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    NotBefore    : 5/2/2013 3:37:14 PM
    NotAfter     : 5/1/2017 3:37:14 PM
    SerialNumber : 287ED09B00060000CD63

    Validating certficate chain...

    Valid   Certificate
    -----   -----------
    True    CN=DEV369@contoso.com
    True    CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    True    CN=Contoso Corporate Root CA, O=CONTOSO
    ==================================================
    Downloading DEV123.pfx
    Error downloading S123456 - The remote server returned an error: (404) Not Found.

The example above illustrates downloading multiple PFX files from the certificate broker and check their validity.
.EXAMPLE
PS C:\temp> .\check-devicecert.ps1 -devices DEV101 -local
    ==================================================
    Reading Cert:LocalMachine\My\584C772D4E9EAA9F5858742B2AE4F3E9A0D602C7

    Subject      : CN=DEV101@contoso.com
    Issuer       : CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    NotBefore    : 5/2/2013 12:39:58 PM
    NotAfter     : 5/1/2017 12:39:58 PM
    SerialNumber : 27DC85E200060000B6D2

    Validating certficate chain...

    Valid   Certificate
    -----   -----------
    True    CN=DEV101@contoso.com
    True    CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    True    CN=Contoso Corporate Root CA, O=CONTOSO
    ==================================================

The example above searches for a certificate in the local certificate device and test the validity.
.EXAMPLE
PS C:\temp> .\check-devicecert.ps1 -pfxfilename .\DEV113.pfx
    ==================================================
    Reading .\S10113.pfx

    Subject      : CN=DEV113@contoso.com
    Issuer       : CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    NotBefore    : 5/2/2013 3:30:35 PM
    NotAfter     : 5/1/2017 3:30:35 PM
    SerialNumber : 2878BAEA00060000CCAD

    Validating certficate chain...

    Valid   Certificate
    -----   -----------
    True    CN=DEV113@contoso.com
    True    CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    True    CN=Contoso Corporate Root CA, O=CONTOSO
    ==================================================

The example above checks the validity of an existing, locally-deviced PFX file.
.EXAMPLE
PS C:\temp> dir *.pfx | .\check-devicecert.ps1
    ==================================================
    Reading C:\temp\DEV113.pfx

    Subject      : CN=DEV113@contoso.com
    Issuer       : CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    NotBefore    : 5/2/2013 3:30:35 PM
    NotAfter     : 5/1/2017 3:30:35 PM
    SerialNumber : 2878BAEA00060000CCAD

    Validating certficate chain...

    Valid   Certificate
    -----   -----------
    True    CN=DEV113@contoso.com
    True    CN=Contoso Corporate Enterprise CA 02, DC=contoso, DC=com
    True    CN=Contoso Corporate Root CA, O=CONTOSO
    ==================================================

The example above checks the validity of all the PFX files deviced in folder.
#>

[CmdletBinding(DefaultParametersetName="devices")]
param (
       [parameter(ParameterSetName="names",Position=0,Mandatory=$true,
        ValueFromPipeline=$false,HelpMessage="Enter device Number, Ex S12345")]
       [string[]]$devices,
       [parameter(ParameterSetName="names",Position=1,Mandatory=$false,
        ValueFromPipeline=$false,HelpMessage="Look for certificate in local device.")]
       [switch]$local,
       [parameter(ParameterSetName="files",Position=0,Mandatory=$true,
        ValueFromPipeline=$true,HelpMessage="Enter PFX file name, Ex C:\folder\DEV123.pfx")]
       [string[]]$pfxfiles
      )

function import-pfxbytes {
   param($pfxBytes)
   ## Import cert into a new object. No need to import it into a certificate device.
   $pfxPass = 'pFxP@$5w0rd'
   $X509Cert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2
   $X509Cert.Import([byte[]]$pfxBytes, $pfxPass,"Exportable,PersistKeySet")
   return $X509Cert
}
function show-certinfo {
   param($cert)
   $cert | Select-Object -property Subject,Issuer,NotBefore,NotAfter,SerialNumber

   $certChain = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Chain
   $result = $certChain.Build($cert)
   $certChain.ChainPolicy.RevocationFlag = "EntireChain"
   $certChain.ChainPolicy.RevocationMode = "Online"
   Write-Host -Object "Validating certficate chain..." -foreground black -background yellow
   "`r`nValid`tCertificate"
   "-----`t-----------"
   foreach ($element in $certChain.ChainElements) {
       "{0}`t{1}" -f $element.Certificate.Verify(),$element.Certificate.Subject
   }
}

$Error.Clear()
("=" * 50)

try {
    switch ($PsCmdlet.ParameterSetName) {
        "names" {
            $client = New-Object  -TypeName System.Net.WebClient
            foreach ($num in $devices) {
                if ($local) {
                    $certs = Get-ChildItem -Recurse -Path Cert: | Where-Object { $_.Subject -like "CN=$num" }
                    if ($certs.count -eq 0) {
                        "No matching certificates found in the local device."
                        return ''
                    }
                    foreach ($cert in $certs) {
                        $certpath = $cert.pspath -replace 'Microsoft.PowerShell.Security\\Certificate::',"Cert:"
                        Write-host -Object "Reading $certpath"  -foreground black -background yellow
                        show-certinfo($cert)
                        ("=" * 50)
                    }
                }
                else {
                    $url = "https://certbroker.contoso.com/pfxshare/$($num).pfx"
                    Write-host -Object "Downloading $num.pfx" -foreground black -background yellow
                    $pfxBytes = $client.DownloadData($url)
                    $cert = import-pfxbytes($pfxBytes)
                    show-certinfo($cert)
                    ("=" * 50)
                }
            }
        }

        "files" {
            foreach ($file in $pfxfiles) {
                Write-host -Object "Reading $file" -foreground black -background yellow
                $pfxBytes = Get-Content -path $file -encoding Byte -ErrorAction:SilentlyContinue
                if ($error.count -ne 0) {throw $error}
                $cert = import-pfxbytes($pfxBytes)
                show-certinfo($cert)
                ("=" * 50)
            }
        }
    }
}
catch {
    $_.Exception.Message
    $_.InvocationInfo.PositionMessage
}
```]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>2014-11-03 16:27:22</wp:post_date>
  <wp:post_date_gmt>2014-11-04 00:27:22</wp:post_date_gmt>
  <wp:post_modified>2017-02-09 08:29:24</wp:post_modified>
  <wp:post_modified_gmt>2017-02-09 16:29:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>working-with-certificates-in-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="certificates"><![CDATA[certificates]]></category>
  <category domain="post_tag" nicename="comment-based-help"><![CDATA[comment-based help]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="scripting"><![CDATA[Scripting]]></category>
  <category domain="post_tag" nicename="x-509"><![CDATA[x.509]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_11212599</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5935195383255810048&type=U&a=AaFe]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"p0ipCmYJdp";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/8k6duth1p6K]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27350327242]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_9011490</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[Understanding Byte Arrays in PowerShell | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://seanonit.wordpress.com/2014/11/11/understanding-byte-arrays-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.120</wp:comment_author_IP>
    <wp:comment_date>2014-11-11 11:48:32</wp:comment_date>
    <wp:comment_date_gmt>2014-11-11 19:48:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previous article I presented a PowerShell script for inspecting and validating certificates stored as PFX files. My [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415735312.2234909534454345703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1415735727]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415735727.108047008514404296875;s:7:"message";s:46:"swsamwa changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>94</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:45</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Working with certificates in PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189505.6793689727783203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191346]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191347.014069080352783203125;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>108</wp:comment_id>
    <wp:comment_author><![CDATA[whowuddathunk]]></wp:comment_author>
    <wp:comment_author_email>radicall@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http://whowouldathunk.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>199.201.65.3</wp:comment_author_IP>
    <wp:comment_date>2017-01-05 21:31:26</wp:comment_date>
    <wp:comment_date_gmt>2017-01-06 05:31:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[well had I known sooner someone else had done the same work as me :).. can you fix the formatting on it please?

My use case is mostly different (device provisioning, get name, add entries where they might go, get certificates through a prop interface, store certificates temporarily, provision device, track cert info (expiration, device name, thumbprint hash)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>41001345</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1483727377]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1483686025.6338939666748046875;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"whowuddathunk";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1483727377]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1483727378.3414208889007568359375;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1483680686.2729671001434326171875;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"whowuddathunk";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>109</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.61.255.188</wp:comment_author_IP>
    <wp:comment_date>2017-01-06 10:30:07</wp:comment_date>
    <wp:comment_date_gmt>2017-01-06 18:30:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I hate when WordPress does that to the formatting. Should be fixed now.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>108</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1483727409]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1483727408]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1483727408.9122231006622314453125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1251</wp:comment_id>
    <wp:comment_author><![CDATA[Mike Wiedemann]]></wp:comment_author>
    <wp:comment_author_email>Mike.Wiedemann@cusatum.de</wp:comment_author_email>
    <wp:comment_author_url>https://cusatum.de</wp:comment_author_url>
    <wp:comment_author_IP>95.90.236.210</wp:comment_author_IP>
    <wp:comment_date>2020-10-26 11:08:13</wp:comment_date>
    <wp:comment_date_gmt>2020-10-26 19:08:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks after hours of search I found the right solution]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1603739294.995541;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1603742995]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1603742995]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1603742995.590942;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Throwback Thursday - Windows Command Shell (Batch) scripting</title>
  <link>https://seanonit.wordpress.com/2014/11/06/throwback-thursday-windows-command-shell-batch-scripting/</link>
  <pubDate>Thu, 06 Nov 2014 13:30:00 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=55</guid>
  <description/>
  <content:encoded><![CDATA[This Thursday I am returning to my scripting roots (if you don't count <a href="http://en.wikipedia.org/wiki/DIGITAL_Command_Language">VAX DCL</a>) to talk about Windows Command Shell scripts. With nice powerful scripting options like PowerShell why does anyone bother with "DOS Batch" scripts anymore?

First off, let me set the record straight. Windows Command Shell scripting is much more powerful than "DOS Batch" files. Yes, they share a common heritage and syntax. But the Windows Command shell can do so much more. Not to mention, there are lots of older systems still deployed that don't have PowerShell installed. The Windows Command shell is guaranteed to be installed.

Some things you can do in Windows command shell scripts that you may not have known:
<ul>
	<li>Arithmetic (using the SET /A command)</li>
	<li>Complex FOR loops (parsing, counting, collection enumeration)</li>
	<li>Subroutines within a single script file (using "CALL :label")</li>
	<li>Text parsing (using the FOR command)</li>
	<li>Additional built-in environment variables (e.g. %CD%, %RANDOM%, and others)</li>
	<li>Variable Substring extraction and replacement (see the help for the SET command)</li>
	<li>Variable value transformation (e.g. get the size of the file named by the variable using %~z1)</li>
</ul>
I will illustrate a view of these enhancements while I discuss different ways of handling command line arguments.

The Windows Command shell provide variable for the first nine arguments passed on the command line when executing a script. These variables are numbered %1 through %9. But what if you want (or need) to pass more parameters than that? Take the following script:

[code language="bash" title="test15args.cmd"]
@echo off
echo Arg[1] = %1
echo Arg[2] = %2
echo Arg[3] = %3
echo Arg[4] = %4
echo Arg[5] = %5
echo Arg[6] = %6
echo Arg[7] = %7
echo Arg[8] = %8
echo Arg[9] = %9
echo Arg[10] = %10
echo Arg[11] = %11
echo Arg[12] = %12
echo Arg[13] = %13
echo Arg[14] = %14
echo Arg[15] = %15
```

Let's see what happens when you try to access the 10<sup>th</sup> argument:

```
C:\temp> test15args.cmd a b c d e f g h i j k l m n o
Arg[1] = a
Arg[2] = b
Arg[3] = c
Arg[4] = d
Arg[5] = e
Arg[6] = f
Arg[7] = g
Arg[8] = h
Arg[9] = i
Arg[10] = a0
Arg[11] = a1
Arg[12] = a2
Arg[13] = a3
Arg[14] = a4
Arg[15] = a5
```

Notice that starting with the 10 argument the script is just outputting the value of the 1<sup>st</sup> argument followed by a number. Also, using the numbered variables implies that you expect command line arguments to be passed in a specific order. What if you want to pass arguments in any order or handle more than nine values? This is where the SHIFT command comes in. SHIFT is not new. It existed in DOS prior to the Windows Command shell, but when combined with other new features of the Command shell it is more powerful. Take this next example:

[code language="bash" title="testALLargs.cmd"]
@echo off
setlocal
set /a c=1
:top
echo Arg[%c%] = "%1"
set /a c+=1
shift
if "%1" NEQ "" goto :top
goto :eof
echo You should never reach this line of the script.
```

SHIFT allows us to access each argument by SHIFT-ing it through the %1 variable. Bonus: notice the use of "set /a". This is how you do arithmetic. Here is the output:

```
C:\temp> testAllargs.cmd a b c d e f g h i j k l m n o
Arg[1] = "a"
Arg[2] = "b"
Arg[3] = "c"
Arg[4] = "d"
Arg[5] = "e"
Arg[6] = "f"
Arg[7] = "g"
Arg[8] = "h"
Arg[9] = "i"
Arg[10] = "j"
Arg[11] = "k"
Arg[12] = "l"
Arg[13] = "m"
Arg[14] = "n"
Arg[15] = "o"
```

So now we have a method of looking at each command line argument and handling it independent of its position on the command line. Let's look at a more complex script.

I would like to check all the command line arguments and determine if they are valid for the script before ever trying to execute the main logic of the script. It would also be nice to separate blocks of code in the script into "subroutines" so that the complex logic of a specific task can be isolated from the main logic flow of the script. Here is a high-level outline of such a script.

```
  ForEach arg in args[]
  {
    if valid(arg) then add arg to collection
    if not valid(arg) then display error message
  }
  ForEach arg in collection
  {
    call subroutine to handle arg
  }
```

Take a look at the script. The script is divided into four sections:
<ul>
	<li>Initialization - where we validate the arguments</li>
	<li>Main block - where we control the order of execution</li>
	<li>Subroutines - where the actual work gets done</li>
	<li>Helper functions - specialized tasks that are not part of the main logic</li>
</ul>

[code language="bash" title="cmdparams.cmd"]
@echo off
setlocal EnableDelayedExpansion
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:GetOpts - Check Command line options
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
if "%1" EQU "" (
   goto :FinInit
)
if /i "%1" EQU "ACTION01" goto :AddOpt
if /i "%1" EQU "ACTION02" goto :AddOpt
if /i "%1" EQU "ACTION03" goto :AddOpt
if /i "%1" EQU "ACTION04" goto :AddOpt
if /i "%1" EQU "ACTION05" goto :AddOpt
if /i "%1" EQU "ACTION06" goto :AddOpt
if /i "%1" EQU "ACTION07" goto :AddOpt
if /i "%1" EQU "ACTION08" goto :AddOpt
if /i "%1" EQU "ACTION09" goto :AddOpt
if /i "%1" EQU "ACTION10" goto :AddOpt
if /i "%1" EQU "ACTION11" goto :AddOpt
if /i "%1" EQU "ACTION12" goto :AddOpt
if /i "%1" EQU "ACTION13" goto :AddOpt
if /i "%1" EQU "ACTION14" goto :AddOpt
if /i "%1" EQU "ACTION15" goto :AddOpt
:::::::::::::::::::::::::
:   Fall through to error if no match
:::::::::::::::::::::::::
goto :CMDError %1

:::::::::::::::::::::::::
:AddOpt
:::::::::::::::::::::::::
set MY_OPT_LIST=!MY_OPT_LIST! %1
:::::::::::::::::::::::::
:NextOpt
:::::::::::::::::::::::::
shift
goto :GetOpts

::::::::::::::::::::::::::::::::::::::::::
:FinInit  Finish initializing script environment
::::::::::::::::::::::::::::::::::::::::::
echo Finish initializing script environment.
echo Add commands here to create temp files or other tasks required by the script.
::::::::::::::::::::::::::::::::::::::::::
:         Count the number of options
::::::::::::::::::::::::::::::::::::::::::
set MY_OPT_LIST
set /a optcnt = 0
for %%a in (%MY_OPT_LIST%) do (
   set /a optcnt = !optcnt! + 1
)
echo Total options selected = %optcnt%
::::::::::::::::::::::::::::::::::::::::::
:        End of Init section
::::::::::::::::::::::::::::::::::::::::::
:Main    Main Section - Process selected options
::::::::::::::::::::::::::::::::::::::::::
if %optcnt% EQU 0 goto :eof
for %%a in (%MY_OPT_LIST%) do (
   call :%%a
)
goto :eof
::::::::::::::::::::::::::::::::::::::::::
:         End of Main section
::::::::::::::::::::::::::::::::::::::::::
:         Begin Action subroutines
::::::::::::::::::::::::::::::::::::::::::
:ACTION01
echo Add your Action01 commands here.
goto :eof
:ACTION02
echo Add your Action02 commands here.
goto :eof
:ACTION03
echo Add your Action03 commands here.
goto :eof
:ACTION04
echo Add your Action04 commands here.
goto :eof
:ACTION05
echo Add your Action05 commands here.
goto :eof
:ACTION06
echo Add your Action06 commands here.
goto :eof
:ACTION07
echo Add your Action07 commands here.
goto :eof
:ACTION08
echo Add your Action08 commands here.
goto :eof
:ACTION09
echo Add your Action09 commands here.
goto :eof
:ACTION10
echo Add your Action10 commands here.
goto :eof
:ACTION11
echo Add your Action11 commands here.
goto :eof
:ACTION12
echo Add your Action12 commands here.
goto :eof
:ACTION13
echo Add your Action13 commands here.
goto :eof
:ACTION14
echo Add your Action14 commands here.
goto :eof
:ACTION15
echo Add your Action15 commands here.
goto :eof
::::::::::::::::::::::::::::::::::::::::::
:         End Action subroutines section
::::::::::::::::::::::::::::::::::::::::::
:         Begin Helper functions
::::::::::::::::::::::::::::::::::::::::::
:CMDError - report error in command line options
::::::::::::::::::::::::::::::::::::::::::
echo Error: '%1' is not a valid option
echo.
echo Valid options are:
echo    ACTION01, ACTION02, ACTION03, ACTION04, ACTION05,
echo    ACTION06, ACTION07, ACTION08, ACTION09, ACTION10,
echo    ACTION11, ACTION12, ACTION13, ACTION14, ACTION15
echo.
goto :EOF
::::::::::::::::::::::::::::::::::::::::::
:        End of Script
::::::::::::::::::::::::::::::::::::::::::
```

Here is the example output:

```
C:\temp> cmdparams.cmd action01 action05 action12 action03
Finish initializing script environment.
Add commands here to create temp files or other tasks required by the script.
MY_OPT_LIST= action01 action05 action12 action03
Total options selected = 4
Add your Action01 commands here.
Add your Action05 commands here.
Add your Action12 commands here.
Add your Action03 commands here.

C:\temp> cmdparams.cmd action1
Error: 'action1' is not a valid option

Valid options are:
   ACTION01, ACTION02, ACTION03, ACTION04, ACTION05,
   ACTION06, ACTION07, ACTION08, ACTION09, ACTION10,
   ACTION11, ACTION12, ACTION13, ACTION14, ACTION15

```

OK, what makes a subroutine in Windows Command shell? In DOS Batch you had to put subroutines in a separate Batch file so you could CALL that batch script from your main script. The Windows Command shell added functionality to the CALL command that allows you to CALL to a label located in the current script file instead of using GOTO. The Command shell also added the special label ":EOF" to indicate that you were done executing and you want to return back to the caller. This allows you to separate the "business logic" of your scripts into subroutines and it them separate from the "flow logic" of the main portion of the script.

PS: this is a shoutout to <a href="http://www.cse.unt.edu/~donr" target="_blank">DonR</a> who got me started in a lot of scripting languages way back in 1987.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2014-11-06 05:30:00</wp:post_date>
  <wp:post_date_gmt>2014-11-06 13:30:00</wp:post_date_gmt>
  <wp:post_modified>2014-11-05 16:15:05</wp:post_modified>
  <wp:post_modified_gmt>2014-11-06 00:15:05</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>throwback-thursday-windows-command-shell-batch-scripting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="batch"><![CDATA[batch]]></category>
  <category domain="post_tag" nicename="cmd"><![CDATA[cmd]]></category>
  <category domain="category" nicename="command-shell"><![CDATA[Command Shell]]></category>
  <category domain="category" nicename="scripting"><![CDATA[Scripting]]></category>
  <category domain="post_tag" nicename="tbt"><![CDATA[TBT]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/bDMTxiPHNJ6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5936136747988561920&type=U&a=8RjE]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Simple ARAPI.NET Query Example in C#</title>
  <link>https://seanonit.wordpress.com/2014/11/07/simple-arapi-net-query-example-in-c/</link>
  <pubDate>Fri, 07 Nov 2014 19:31:38 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=71</guid>
  <description/>
  <content:encoded><![CDATA[Now that you have <a href="http://seanonit.wordpress.com/2014/10/22/installing-bmcs-arapi-net-library/">ARAPI.NET installed</a> let's take a look at an example using C#. There are a couple of tricks required to get your C# project to compile and run properly.
<ul>
	<li>Be sure the ARAPI.NET library is installed correctly and that the directory path has been added to your System PATH environment variable.</li>
	<li>Set the "Target Platform" to x86 in the Build properties of your Visual Studio project.</li>
	<li>Add references for both BMC.ARSystem.dll and BMC.arnettoc.dll to your project.
<a href="https://seanonit.files.wordpress.com/2014/11/cprojref.png"><img class="alignnone size-medium wp-image-72" src="https://seanonit.files.wordpress.com/2014/11/cprojref.png?w=300" alt="Project Reference" width="300" height="233" /></a></li>
	<li>Include the "using BMC.ARSystem;" statement in your code.</li>
</ul>
In this example I am creating a simple query to find all the users in Remedy that are configured as "Support Staff" and output that list in a CSV format. I have used this to do a periodic audit of our users and remove users that have changed job roles and no longer need "Support Staff" access.

[code language="csharp"]
using System;
using System.Collections.Generic;
using BMC.ARSystem;

namespace SupportStaff
{
  class Program
  {
    static void Main(string[] args)
    {
      string arServerName = "arserver.contoso.com";
      string arUsername = "Demo";
      string arUserPassword = "Password";
      string arAuthentication = "";
      Int32 arServerPort = 51100;

      // Log into the AR Server
      Server arServer = new Server();
      arServer.Login(arServerName, arUsername, arUserPassword, arAuthentication, arServerPort);

      // Create list of fields we want to return from the Form
      EntryListFieldList peopleEntryFieldList = new EntryListFieldList();
      peopleEntryFieldList.AddField(1, 50, ""); // Person ID
      peopleEntryFieldList.AddField(4, 50, ""); // Remedy ID
      peopleEntryFieldList.AddField(1000000025, 50, ""); // Support Staff
      peopleEntryFieldList.AddField(1000006694, 50, ""); // Auth Alias
      peopleEntryFieldList.AddField(1764007102, 50, ""); // Network ID

      // Create the Qualifier string used to query the Form
      string qualifier = @"'1000000025' = 0"; // Support Staff value 0 = 'Yes'

      // Execute the query
      EntryFieldValueList entryListWithFields = arServer.GetListEntryWithFields("CTM:People", qualifier, peopleEntryFieldList, 0, 0);

      //Process the results
      if (entryListWithFields.Count != 0)
      {
        Console.WriteLine("\"PPL\",\"RemedyID\",\"AuthAlias\",\"NetworkID\"");
        foreach (var entry in entryListWithFields)
        {
          Console.WriteLine("\"{0}\",\"{1}\",\"{2}\",\"{3}\"",
          entry.FieldValues[1],
          entry.FieldValues[4],
          entry.FieldValues[1000006694],
          entry.FieldValues[1764007102]);
        }
      }
      arServer.Logout();
    }
  }
}
```
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2014-11-07 11:31:38</wp:post_date>
  <wp:post_date_gmt>2014-11-07 19:31:38</wp:post_date_gmt>
  <wp:post_modified>2014-11-08 18:53:55</wp:post_modified>
  <wp:post_modified_gmt>2014-11-09 02:53:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>simple-arapi-net-query-example-in-c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="arapi"><![CDATA[ARAPI]]></category>
  <category domain="post_tag" nicename="arapi-net"><![CDATA[ARAPI.NET]]></category>
  <category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
  <category domain="category" nicename="remedy"><![CDATA[Remedy]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5936570496240857088&type=U&a=Ewo3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/j8y38sZkf2A]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>82</wp:comment_id>
    <wp:comment_author><![CDATA[Christopher Speed]]></wp:comment_author>
    <wp:comment_author_email>christopher.speed@uscellular.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>165.27.246.1</wp:comment_author_IP>
    <wp:comment_date>2016-08-25 07:25:36</wp:comment_date>
    <wp:comment_date_gmt>2016-08-25 15:25:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How do you pass that the qualifier with a parameter? If the value of Yes/No is stored in a variable. I tried string qualifier = @"'1000000025' = arYesNo" but doesn't give me the value for arYesNo.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1472138736]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1472138736.8871629238128662109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1472138737]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>83</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>131.107.159.82</wp:comment_author_IP>
    <wp:comment_date>2016-08-25 08:39:39</wp:comment_date>
    <wp:comment_date_gmt>2016-08-25 16:39:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That is a question of C# syntax. The qualifier is just a string so you just need to build the string. So if you have the value of Yes/No stored in the variable arYesNo it might look like this:

string qualifier = @"‘1000000025' = " + arYesNo.ToString();]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>82</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1472143181]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1472143180]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1472143180.768330097198486328125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>90</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:37</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Simple ARAPI.NET Query Example in C# [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189497.723987102508544921875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191349]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191350.1362450122833251953125;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>C#ProjRef</title>
  <link>https://seanonit.wordpress.com/2014/11/07/simple-arapi-net-query-example-in-c/cprojref/</link>
  <pubDate>Fri, 07 Nov 2014 19:22:44 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2014/11/cprojref.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2014-11-07 11:22:44</wp:post_date>
  <wp:post_date_gmt>2014-11-07 19:22:44</wp:post_date_gmt>
  <wp:post_modified>2014-11-07 11:23:06</wp:post_modified>
  <wp:post_modified_gmt>2014-11-07 19:23:06</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cprojref</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>71</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2014/11/cprojref.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Project Reference]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Understanding Byte Arrays in PowerShell</title>
  <link>https://seanonit.wordpress.com/2014/11/11/understanding-byte-arrays-in-powershell/</link>
  <pubDate>Tue, 11 Nov 2014 19:48:28 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=77</guid>
  <description/>
  <content:encoded><![CDATA[In a previous <a href="http://seanonit.wordpress.com/2014/11/03/working-with-certificates-in-powershell/">article, </a>I presented a PowerShell script for inspecting and validating certificates stored as PFX files. My goal is to get data into an X509Certificate2 object so that I can validate the certificate properties. The <a href="https://docs.microsoft.com/dotnet/api/system.security.cryptography.x509certificates.x509certificate2.import#overloads">X509Certificate2 Import() methods</a> have two sets variations. One set takes a filename for the certificate file to be imported. The second set takes a Byte array containing the certificate data to be imported.

In this script, I can import PFX certificate files by downloading a byte stream from a web server or by reading a file stored on disk. I want to avoid creating temporary files and I want to make a generic import function that could be used independently of the data retrieval method.  I settled on using an array of bytes as the import format for either scenario.

To import a PFX file from disk I use the <a href="https://docs.microsoft.com/powershell/module/Microsoft.PowerShell.Management/Get-Content">Get-Content</a> cmdlet. Let's take a closer look at how Get-Content works and what it returns.

```powershell
PS C:\temp> $pfxbytes = Get-Content .\DEV113.pfx
PS C:\temp> $pfxbytes.GetType().Name
Object[]
PS C:\temp> $pfxbytes[0].GetType().Name
String
PS C:\temp> $pfxbytes[0].length
18
PS C:\temp> $pfxbytes.length
70
PS C:\temp> $pfxbytes | ForEach-Object { $count += $_.length }
PS C:\temp> $count
7489
PS C:\temp> Get-ChildItem .\DEV113.pfx

Directory: C:\temp

Mode              LastWriteTime     Length Name
----              -------------     ------ ----
-a---       9/30/2014   1:03 PM       7558 DEV113.pfx
```

By default, we see that Get-Content returns an array of String objects. There are two problems with this for my use case.

<ol>
    <li>If you add up the length of all 70 strings you get a total of 7489 characters. But the files size is 7558 bytes, so this does not match. The data in a PFX files is not string-oriented. It is binary data.</li>
    <li>I need a Byte array to import the data into an X509Certificate2 object.</li>
</ol>

Fortunately, using the -Encoding parameter you can specify that you want Byte encoded data returned instead of strings.

```powershell
PS C:\temp> $pfxbytes = Get-Content .\DEV113.pfx -Encoding Byte
PS C:\temp> $pfxbytes.GetType().Name
Object[]
PS C:\temp> $pfxbytes[0].GetType().Name
Byte
PS C:\temp> $pfxbytes[0].length
1
PS C:\temp> $pfxbytes.length
7558
```

Notice that Get-Content still returns an array of objects but those objects are Bytes. The total length of $pfxbytes now matches the size on disk.

To download the PFX file from the web server I am using the System.Net.Webclient class. System.Net.Webclient has three main ways of downloading content from a web server:

<ul>
    <li>The <a href="http://msdn.microsoft.com/en-us/library/fhd1f0sw(v=vs.110).aspx">DownloadString</a> methods are useful when you are only expecting to receive text data (e.g. HTML, XML, or JSON). Since the PFX file format is binary, not text, this will not work as I have already shown above with Get-Content.</li>
    <li>The <a href="http://msdn.microsoft.com/en-us/library/ez801hhe(v=vs.110).aspx">DownloadFile</a> methods would work except that I don't want to have to save the file to disk as required by these methods.</li>
    <li>The <a href="http://msdn.microsoft.com/en-us/library/xz398a3f(v=vs.110).aspx">DownloadData</a> methods return a byte array containing the data requested. This is the method that best meets our needs.</li>
</ul>

<strong>But what is a Byte array? How is a Byte array different than a string?</strong>
A byte array can contain any arbitrary binary data. The data does not have to be character data. Character data is subject to interpretation. Character data implies encoding. There is more than one way to encode a character. Take the following example:

```powershell
PS C:\temp> $string = 'Hello World'
PS C:\temp> $string.length
11
PS C:\temp> $bytes = [System.Text.Encoding]::Unicode.GetBytes($string)
PS C:\temp> $bytes.length
22
```

As you can see, the length of $string is 11 characters. If we convert that to a byte[] we get 22 bytes of data. It is also important to know the format of the source data when you are converting between encoding schemes. Take for example:

```powershell
PS C:\temp> $array = @(72,101,108,108,111,32,87,111,114,108,100)
PS C:\temp> $string = [System.Text.Encoding]::UTF8.GetString($array)
PS C:\temp> $string.length
11
PS C:\temp> $string
Hello World
```

You see it is possible to convert the byte[] $array to a UTF8 encoded string because each byte represents one character. However, if you try to convert that same array to Unicode it will treat each pair of bytes as a single character.

```powershell
PS C:\temp> $string = [System.Text.Encoding]::Unicode.GetString($array)
PS C:\temp> $string.length
6
PS C:\temp> $string
??????
```

The result is an unreadable value stored in $string.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>77</wp:post_id>
  <wp:post_date>2014-11-11 11:48:28</wp:post_date>
  <wp:post_date_gmt>2014-11-11 19:48:28</wp:post_date_gmt>
  <wp:post_modified>2020-03-16 11:35:33</wp:post_modified>
  <wp:post_modified_gmt>2020-03-16 19:35:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>understanding-byte-arrays-in-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="byte-array"><![CDATA[Byte array]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="category" nicename="scripting"><![CDATA[Scripting]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/F3FLbkyURpG]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5938024286030680064&type=U&a=-gJ1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27350268162]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>87</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:30</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Understanding Byte Arrays in PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189490.31245708465576171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191352]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191352.4778048992156982421875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>151</wp:comment_id>
    <wp:comment_author><![CDATA[cstanley]]></wp:comment_author>
    <wp:comment_author_email>websites@charltonstanley.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>199.253.128.9</wp:comment_author_IP>
    <wp:comment_date>2017-06-23 09:07:34</wp:comment_date>
    <wp:comment_date_gmt>2017-06-23 17:07:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[thank you very much!  This helped me convert an AD thumbnailphoto byte array to a base64 encoded string so that I could then decode and write to a file. :)  (photos were uploaded to AD with base64 encoding)

$path = 'c:\temp\12345.jpg'
$user = get-aduser '12345' -properties thumbnailphoto
$thumbnail = $user.thumbnailphoto
$Base64EncodedString = [System.Text.Encoding]::UTF8.GetString($thumbnail[0])
$Decodedbytes = [Convert]::FromBase64String($Base64EncodedString)
[IO.File]::WriteAllBytes($path, $Decodedbytes)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1498237654.890758991241455078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1498239886]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1498239886]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1498239886.6729209423065185546875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[0]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Consuming an RSS feed with PowerShell</title>
  <link>https://seanonit.wordpress.com/?p=86</link>
  <pubDate>Wed, 26 Nov 2014 23:27:58 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.wordpress.com/?p=86</guid>
  <description/>
  <content:encoded><![CDATA[Here is a fun little function I created to check the current sales running at <a href="http://www.woot.com/">woot.com</a>.

```powershell
function woot {
  param([ValidateSet('accessories','computers','electronics','home','kids','sellout','shirt','sport','tools','wine','www','moofi', ignorecase=$true)]
        [string]$site
  )
  $url = 'http://api.woot.com/1/sales/current.rss'
  if ($site -ne "") {
     $url = "http://api.woot.com/1/sales/current.rss/{0}.woot.com" -f $site
  }
  $wc = New-Object System.Net.WebClient
  [xml] $xml = $wc.DownloadString($url)
  $woots = $xml.GetElementsByTagName("item") | sort link
  foreach ($woot in $woots) {
    if ($woot.wootoff -eq "true") {$woof="woot!"} else {$woof=""}
    $props = @{
       site=($woot.link -split "\.")[0] -replace "http://","";
       title=$woot.title;
       price=$woot.pricerange;
       '%sold'=[double]($_.soldoutpercentage) * 100;
       wootoff=$woof
       condition=$woot.condition
    }
    new-object -type PSObject -prop $props
  }
}
```

Woot! has a full <a href="http://api.woot.com/2">Web API</a> for building applications that interact with their service. However, if you are only interested in knowing what is for sale right now you can just check the RSS feed that they publish. <a href="http://en.wikipedia.org/wiki/Rss">RSS</a> is just XML so when you download the RSS feed you just need to load it into an XML document object and let .NET do the parsing for you. Woot! adds some custom elements to the XML for their product metadata. After some manual inspection of raw XML it was pretty easy to pick out the pieces of information I was interested in.

Here is an exampl of the output.

[code language="bash" light="true"]
PS C:\> woot | ft site,title,price,%sold,wootoff,condition -auto

site        title                                     price            %sold wootoff condition
----        -----                                     -----            ----- ------- ---------
accessories Focus Men's 6-Pack Dress Socks - 3 Styles $10.99               0         New
computers   Gunnar Gaming Eyewear                     $39.99 - $59.99      0         New
electronics Turtle Beach Ear Force Gaming Headsets    $18.99 - $58.99      0         Refurbished
home        High Sierra Duffels + Luggage             $49.99 - $79.99      0
kids        Teamson Kids Ice Mansion Doll House       $99.99               0         New
sellout     Asus MAXIMUS VI HERO Z87 Motherboard      $169.99              0         New
shirt       A Diamond In The Rough                    $12                  0
sport       CRKT Guppie and Eat'N Tool Combo          $12.99               0         New
tools       Gladiator Starter Packs - Your Choice     $24.99 - $34.99      0         New
wine        Expression Wines Pinot Noir (4)           $119.99              0         New
www         Cuisinart Cookware - 6 Styles             $99.99 - $239.99     0         New
```]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>86</wp:post_id>
  <wp:post_date>2014-11-26 15:27:58</wp:post_date>
  <wp:post_date_gmt>2014-11-26 23:27:58</wp:post_date_gmt>
  <wp:post_modified>2020-03-16 11:49:01</wp:post_modified>
  <wp:post_modified_gmt>2020-03-16 19:49:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>consuming-an-rss-feed-with-powershell</wp:post_name>
  <wp:status>private</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="rss"><![CDATA[RSS]]></category>
  <category domain="category" nicename="scripting"><![CDATA[Scripting]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <category domain="post_tag" nicename="woot"><![CDATA[woot!]]></category>
  <category domain="post_tag" nicename="xml"><![CDATA[XML]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/8yt1rhk8ruD]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5943515343572971520&type=U&a=vnaw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OnIT</title>
  <link>https://seanonit.wordpress.com/onit/</link>
  <pubDate>Mon, 29 Dec 2014 23:53:39 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2014/12/onit.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>94</wp:post_id>
  <wp:post_date>2014-12-29 15:53:39</wp:post_date>
  <wp:post_date_gmt>2014-12-29 23:53:39</wp:post_date_gmt>
  <wp:post_modified>2014-12-29 15:53:39</wp:post_modified>
  <wp:post_modified_gmt>2014-12-29 23:53:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>onit</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2014/12/onit.png</wp:attachment_url>
</item>
<item>
  <title>PowerShell error: NativeCommandFailed after installing KB3000850 -- fixed! See KB3062960</title>
  <link>https://seanonit.wordpress.com/2015/03/17/powershell-error-nativecommandfailed-after-installing-kb3000850/</link>
  <pubDate>Tue, 17 Mar 2015 19:53:39 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?p=95</guid>
  <description/>
  <content:encoded><![CDATA[Recently we went through the exercise of updating our Windows Server 2012 R2 deployment image to include a bunch of updates. After this, we noticed that several PowerShell scripts were failing. I also noticed that some commands stopped working properly including PowerShell's own Get-Help cmdlet.

```
PS C:\temp> help
Program 'more.com' failed to run: Object reference not set to an instance of an object.At line:14 char:14
+     $input | more.com
+              ~~~~~~~~.
At line:14 char:5
+     $input | more.com
+     ~~~~~~~~~~~~~~~~~
+ CategoryInfo          : ResourceUnavailable: (:) [], ApplicationFailedException
+ FullyQualifiedErrorId : NativeCommandFailed
```

In fact, you will get the same error anytime you attempt to use a native command (EXE, etc.) in the pipeline. The problem occurs after <a title="KB3000850" href="https://support.microsoft.com/help/3000850/november-2014-update-rollup-for-windows-rt-8-1-windows-8-1-and-windows">KB3000850</a> is installed but is related to having PowerShell Module Logging <del>and Process Creation auditing enabled</del>.  See the following forum post for another reported example: <a href="https://community.idera.com/database-tools/powershell/ask_the_experts/f/learn_powershell_from_don_jones-24/19217/strange-program-more-com-failed-to-run-object-reference-not-set-to-an-instance-of-an-object#pi565=2" target="_blank" rel="noopener">https://community.idera.com/database-tools/powershell/ask_the_experts/f/learn_powershell_from_don_jones-24/19217/strange-program-more-com-failed-to-run-object-reference-not-set-to-an-instance-of-an-object#pi565=2</a>

Here are the relevant policy settings in our environment.

```
Computer Settings
  Administrative Templates
    Windows Components/Windows PowerShell
      Turn on Module Logging = Enabled
      Module Names = *
      Turn on Script Execution = Enabled
      Execution Policy = Allow local scripts and remote signed scripts
```

<del>The forum post on powershell.com seems to indicate that you must also have "Include command line in process creation events" enabled but that is not the case in our environment.</del> You can work around the problem by disabling module logging for all modules for the duration of the PowerShell session/script.

```powershell
Get-Module | %{ $_.LogPipelineExecutionDetails=$false }
```

This is not a viable solution for the existing scripts and automation that we use. Plus, process creation auditing and module logging are enabled by policy for security purposes. Removing KB3000850 removes the problem. But there are many fixes rolled up in KB3000850 that we want in our environment. I also noticed that the file list attached to this KB article includes 60 files related to PowerShell but none of the articles listed in the rollup mention those files so there is no documentation about the PowerShell changes included in this rollup. I have opened a case with Microsoft. I will post updates as I learn more.

<strong>Update 26-March-2015
</strong>We did some more testing and ruled out the Process Creation auditing. Having that auditing enabled or disabled does not affect the problem. You only need Module Logging enabled for PowerShell. Microsoft is still investigating the issue.

<strong>Update 22-April-2015</strong>
Microsoft has finally been able to isolate the problem and has declared this to be a bug. Now we are waiting for them to decide how and when to fix the problem.

<strong>Update 24-April-2015</strong>
Found another side effect of this update. With the update installed, you may experience errors adding Roles and Features to your server. I was trying to add the Desktop Experience feature to my desktop server and it was failing with the message: "Object reference not set to an instance of an object." If you look in the Event log you will find the following event:

```
Log Name:      Microsoft-Windows-ServerManager-MultiMachine/Operational
Source:        Microsoft-Windows-ServerManager-MultiMachine
Date:          4/24/2015 11:08:43 AM
Event ID:      2014
Task Category: Server manager startup task.
Level:         Information
Keywords:
User:          CONTOSO\adminuser
Computer:      servername.contoso.net
Description:
Deployment Wizard commit action completed.  Target Server: localhost. Job: ID:d80f627f-4fee-4d87-bbe4-7858d64a2265;Feature installation. Status: Failed. Reason Object reference not set to an instance of an object.
```

So it seems that installing that Feature requires the use of a Native Command and it is failing for the same reason. Who knows how many other Roles and Features may be affected like this. Removing KB3000850 allowed me to add the Desktop Experience feature.

<strong>Update 1-May-2015</strong>
Good news! We just received a patch to test from Microsoft and have smoke-tested it on several machines. This patch resolves the issue. So now we just need Microsoft to test and package it for public consumption.

<strong>Update 10-July-2015</strong>
The fix is finally being released as KB3062960. It should be available on the 14th of July (Patch Tuesday).

<strong>Update 14-July-2015</strong>
The hotfix is now published: https://support.microsoft.com/en-us/kb/3062960
You must download and deploy this manually. This is not published in Windows Update.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>95</wp:post_id>
  <wp:post_date>2015-03-17 11:53:39</wp:post_date>
  <wp:post_date_gmt>2015-03-17 19:53:39</wp:post_date_gmt>
  <wp:post_modified>2020-03-16 11:52:16</wp:post_modified>
  <wp:post_modified_gmt>2020-03-16 19:52:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>powershell-error-nativecommandfailed-after-installing-kb3000850</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="kb3000850"><![CDATA[KB3000850]]></category>
  <category domain="post_tag" nicename="nativecommandfailed"><![CDATA[NativeCommandFailed]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/8iaeVty3RBa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10205452284961024]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212599</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[swsamwa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/ilQYdOuLFJ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_85453ab63991375d9c745af613f7e6a8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12600237200]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9d2b2e90135ad9156f5b7c67f620e9c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>39</wp:comment_id>
    <wp:comment_author><![CDATA[Program &#039;cmd.exe&#039; failed to run: Object reference not set to an instance of an object - PowerShell 中文博客]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.pstips.net/program-cmd-exe-failed-to-run-object-reference-not-set-to-an-instance-of-an-object.html</wp:comment_author_url>
    <wp:comment_author_IP>121.201.3.211</wp:comment_author_IP>
    <wp:comment_date>2015-11-01 06:59:11</wp:comment_date>
    <wp:comment_date_gmt>2015-11-01 14:59:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] 本文参考自：Sean Wheeler的 PowerShell error: NativeCommandFailed after installing KB3000850 — fixed! See KB3062960 [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1448670215]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1448670216.3207890987396240234375;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446389951.53470706939697265625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446393675.291884899139404296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>35</wp:comment_id>
    <wp:comment_author><![CDATA[Ionut]]></wp:comment_author>
    <wp:comment_author_email>ionut@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/ionutzg</wp:comment_author_url>
    <wp:comment_author_IP>131.107.174.246</wp:comment_author_IP>
    <wp:comment_date>2015-08-28 15:10:24</wp:comment_date>
    <wp:comment_date_gmt>2015-08-28 23:10:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks a lot, this was driving me crazy!!!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1440803424.6001460552215576171875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"ionutzg";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1440803669]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1440803669]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1440803670.0060780048370361328125;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>37</wp:comment_id>
    <wp:comment_author><![CDATA[Mosser Lee]]></wp:comment_author>
    <wp:comment_author_email>mosser@live.cn</wp:comment_author_email>
    <wp:comment_author_url>http://www.pstips.net</wp:comment_author_url>
    <wp:comment_author_IP>167.220.232.36</wp:comment_author_IP>
    <wp:comment_date>2015-10-20 01:07:35</wp:comment_date>
    <wp:comment_date_gmt>2015-10-20 09:07:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I must thank you again, great post that resolved our problem.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1445346731]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1445336869.06542491912841796875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"mosserle";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1445346731.3785059452056884765625;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1445346731]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1445332055.6989018917083740234375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"mosserle";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>88</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:32</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] PowerShell error: NativeCommandFailed after installing KB3000850 &#8212; fixed! See KB3062960 [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189492.9906589984893798828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191351]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191351.6980578899383544921875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Sean on IT</title>
  <link>https://seanonit.wordpress.com/onit-2/</link>
  <pubDate>Tue, 17 Mar 2015 20:24:50 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2015/03/onit.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>99</wp:post_id>
  <wp:post_date>2015-03-17 12:24:50</wp:post_date>
  <wp:post_date_gmt>2015-03-17 20:24:50</wp:post_date_gmt>
  <wp:post_modified>2015-03-17 12:25:17</wp:post_modified>
  <wp:post_modified_gmt>2015-03-17 20:25:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>onit-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2015/03/onit.png</wp:attachment_url>
</item>
<item>
  <title>Use PowerShell and EWS to find out who is sending you email</title>
  <link>https://seanonit.wordpress.com/2015/03/18/use-powershell-and-ews-to-find-out-who-is-sending-you-email/</link>
  <pubDate>Wed, 18 Mar 2015 15:46:24 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?p=102</guid>
  <description/>
  <content:encoded><![CDATA[I get a lot of email from a lot of different sources. A lot of it is from automated alerts generated by services accounts that monitor various applications that my team supports. Each month I like to see how many messages I have gotten from the various sources. Looking at these numbers over time can be helpful to identify trends. If we are suddenly getting more alerts from a particular sender then we may want to look more closely at the health of that system.

Using Outlook's rules engine I send all of these alert messages to a specific folder. Now I just need an easy way to count them. I created a script that scans that folder and counts the number of messages from each sender. The output looks like this:

```
Count Name
----- ----
   10 Service Account A <SMTP:svca@contoso.com>
   10 Ops Monitor 2 <SMTP:opsmon2@contoso.com>
    7 Ops Monitor 3 <SMTP:opsmon3@contoso.com>
    6 Service Account D <SMTP:svcd@contoso.com>
    6 Service Account E <SMTP:svce@contoso.com>
```

The script is pretty simple. I created two functions:

<ul>
    <li>one to find the specific folder in the mailbox</li>
    <li>one to iterate through all the items in the folder</li>
</ul>

To find the target folder you must walk the folder tree until you reach your destination. Once you have the target folder you can create an ItemView and search for all the messages in the folder. PowerShell's Group-Object cmdlet does the work of counting for you.

[code language="powershell" title="get-sendercount.ps1"]
# Load the EWS dll
Add-Type -Path 'C:\Program Files\Microsoft\Exchange\Web Services\2.2\Microsoft.Exchange.WebServices.dll'

#-----------------------------------------------------
function GetTargetFolder {
   param([string]$folderPath)

   $fldArray = $folderPath.Split("\")
   $tfTargetFolder = $MsgRoot

   for ($x = 1; $x -lt $fldArray.Length; $x++)
   {
      #$fldArray[$x]
      $fvFolderView = new-object Microsoft.Exchange.WebServices.Data.FolderView(1)
      $SfSearchFilter = new-object Microsoft.Exchange.WebServices.Data.SearchFilter+IsEqualTo(
         [Microsoft.Exchange.WebServices.Data.FolderSchema]::DisplayName,
         $fldArray[$x]
      )
      $findFolderResults = $service.FindFolders($tfTargetFolder.Id,$SfSearchFilter,$fvFolderView)
      if ($findFolderResults.TotalCount -gt 0)
      {
         foreach($folder in $findFolderResults.Folders)
         {
             $tfTargetFolder = $folder
         }
      }
      else
      {
         "Error Folder Not Found"
         $tfTargetFolder = $null
         break
      }
   }
   $tfTargetFolder
}
#-----------------------------------------------------
function GetItems {
   param ($targetFolder)
   #Define ItemView to retrive just 100 Items at a time
   $ivItemView = New-Object Microsoft.Exchange.WebServices.Data.ItemView(100)

   $AQSString = $null  #find all messages
   do
   {
        $fiItems = $service.FindItems($targetFolder.Id,$AQSString,$ivItemView)
        foreach($Item in $fiItems.Items)
        {
            $Item.Load()
            $Item
        }
        $ivItemView.Offset += $fiItems.Items.Count
   }
   while($fiItems.MoreAvailable -eq $true)
}
#-----------------------------------------------------
$ExchangeVersion = [Microsoft.Exchange.WebServices.Data.ExchangeVersion]::Exchange2010_SP2
$service = New-Object Microsoft.Exchange.WebServices.Data.ExchangeService($ExchangeVersion)

$service.UseDefaultCredentials = $true
$MailboxName = "mymailbox@contoso.com"
$service.AutodiscoverUrl($MailboxName)

#Bind to the Root of the mailbox so I can search the folder namespace for the target
$MsgRootId = [Microsoft.Exchange.WebServices.Data.WellKnownFolderName]::MsgFolderRoot
$MsgRoot = [Microsoft.Exchange.WebServices.Data.Folder]::Bind($service,$MsgRootId)
$targetFolder = GetTargetFolder '\Inbox\Alert Message\Current'

$itemList = GetItems $targetFolder
$itemList | group-object Sender -noelement | sort Count -desc | ft -a
```]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>102</wp:post_id>
  <wp:post_date>2015-03-18 07:46:24</wp:post_date>
  <wp:post_date_gmt>2015-03-18 15:46:24</wp:post_date_gmt>
  <wp:post_modified>2017-02-09 08:24:11</wp:post_modified>
  <wp:post_modified_gmt>2017-02-09 16:24:11</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>use-powershell-and-ews-to-find-out-who-is-sending-you-email</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ews"><![CDATA[ews]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_twitter</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/bi2hkgSAdrR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27350139969]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>95</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:47</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Use PowerShell and EWS to find out who is sending you email [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189507.8942110538482666015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191345]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191346.2323360443115234375;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fixing "The specified module could not be found." errors when using ARAPI.NET</title>
  <link>https://seanonit.wordpress.com/2015/04/02/fixing-the-specified-module-could-not-be-found-errors-when-using-arapi-net/</link>
  <pubDate>Thu, 02 Apr 2015 23:20:54 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?p=109</guid>
  <description/>
  <content:encoded><![CDATA[We have large projects where we are upgrading systems in our stores and we will schedule the same work for 30+ stores at a time. But to track that work we want a Work Order for each store. Entering all of those into our Remedy system by hand would take forever. So, I wrote a little utility in C# to bulk-create Remedy Work Orders from a CSV data file.

It worked great.

Until I deployed it to the people actually doing the work.

The weird thing was that it worked for some users and not for others. It made no sense to me. I couldn't figure out which dependent files were missing. The error looked like this:

```
PS C:\Program Files (x86)\BMC Software\ARAPI80.NET> .\BulkWOCreate.exe /csv .\testdata.csv
Unhandled Exception: System.IO.FileNotFoundException: The specified module could not be found. (Exception from HRESULT:0x8007007E)
   at BMC.ARSystem.Server._Eval(Object v)
   at BMC.ARSystem.Server._performLogin(String methodName, String server, String user, String password, String authentication, String locale, String charSet, Int32 port, String apiCmdLog, String apiResLog, Boolean logInitAndTerm)
   at BMC.ARSystem.Server.Login(String server, String user, String password, String authentication, String locale, String charSet, Int32 port)
   at BMC.ARSystem.Server.Login(String server, String user, String password, String authentication, Int32 port)
   at BulkWOCreate.Program.Main(String[] args)
```

I found I had the same problem with my ARAPI.NET PowerShell scripts on the same machines. In PowerShell the error looks like this:

```
Exception calling "Login" with "5"; argument(s): "Could not load file or assembly 'BMC.arnettoc.dll' or one of its dependencies. The specified module could not be found."
At C:\Program Files (x86)\BMC Software\ARAPI80.NET\get-arform.ps1:20 char:4
+    $arserver.Login($ARServerName, $ARSvcAccount, $ARSvcPassword, $ARAuthenticati ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : FileNotFoundException
```

This error was actually more helpful because it calls out BMC.arnettoc.dll. This gives us a place to start investigating.

So the question is how to figure out what the dependencies are. The DUMPBIN tool from Visual Studio can show us the dependencies statically linked. So let us look at BMC.arnettoc.dll:

```
C:\Program Files (x86)\BMC Software\ARAPI80.NET> "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\dumpbin.exe" /dependents BMC.arnettoc.dll
Microsoft (R) COFF/PE Dumper Version 12.00.21005.1
Copyright (C) Microsoft Corporation.  All rights reserved.

Dump of file BMC.arnettoc.dll

File Type: DLL

  Image has the following dependencies:

    MSVCR71.dll
    KERNEL32.dll
    USER32.dll
    mscoree.dll
    arcni80_build001.dll
    OLEAUT32.dll

  Summary

        3000 .data
        7000 .rdata
        1000 .reloc
        1000 .rsrc
        2000 .text
```

Next step is to verify that all of the dependent DLLs exist on the system and are accessible to my application. All of these DLLS exist except MSVCR71.DLL. But installing that DLL didn't fix the problem. So where are the other dependencies hiding? The most likely candidate is in another ARAPI.NET DLL. We can see that there is a dependency on arcni80_build001.dll so let's look at these dependencies.

```
C:\Program Files (x86)\BMC Software\ARAPI80.NET> "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\dumpbin.exe" /dependents arcni80_build001.dll
Microsoft (R) COFF/PE Dumper Version 12.00.21005.1
Copyright (C) Microsoft Corporation.  All rights reserved.

Dump of file arcni80_build001.dll

File Type: DLL

  Image has the following dependencies:

    arapi80_build001.dll
    cmdbapi75.dll
    KERNEL32.dll
    OLEAUT32.dll
    MSVCP71.dll
    MSVCR71.dll

  Summary

       43000 .data
        B000 .rdata
        C000 .reloc
       97000 .text
```

Here we can see that we also need MSVCP71.DLL. Installing that DLL resolves the issue. Great, but what are these files and where do they come from. The following article from Microsoft gives us the answer.

Redistribution of the shared C runtime component in Visual C++
<a href="https://support.microsoft.com/en-us/help/326922/redistribution-of-the-shared-c-runtime-component-in-visual-c">https://support.microsoft.com/en-us/help/326922/redistribution-of-the-shared-c-runtime-component-in-visual-c</a>

So, as you can see, these are C-Runtime DLLs from .NET 1.1.

Unfortunately, BMC's .NET library was built with a very old version of .NET. They really need to fix this. The .NET 1.1 components do not ship in the OS anymore. Newer versions of .NET are supposed to be backward compatible, and, for the most part, they are. BMC should have included them in their distribution. But applications and libraries really should be recompiled to remove dependencies on these very old runtime components.

So, what if you don't have copies of these DLLs available anywhere? Where can you find this from a reliable source?

After a bit of searching I found:

Microsoft .NET Framework Version 1.1 Redistributable Package
<a href="https://www.microsoft.com/download/details.aspx?id=26">https://www.microsoft.com/download/details.aspx?id=26</a>

There are a few problems with this package. First, it will not install on anything newer than Windows XP or Server 2003. Second, this package does not contain both DLLs. It only contains MSVCR71.DLL. After more searching, I found the .NET 1.1 SDK.

.NET Framework SDK Version 1.1
<a href="https://www.microsoft.com/download/details.aspx?id=16217">https://www.microsoft.com/download/details.aspx?id=16217</a>

Again, this does not play well with newer OS versions but the good news is that it does contain both DLLs that we need. So now I just need to extract the files somehow.

When you download this package you get a single setup.exe. Looking at the EXE file detailed properties I see that it is an IExpress package. IExpress is a setup framework that first shipped in the IEAK to help you package custom branded installations of Internet Explorer. You can read more about it here: <a href="https://docs.microsoft.com/internet-explorer/ie11-ieak/iexpress-command-line-options">https://docs.microsoft.com/en-us/internet-explorer/ie11-ieak/iexpress-command-line-options</a>

An IExpress package has the following command-line options:

```
Command line options:
/Q -- Quiet modes for package,
/T: -- Specifies temporary working folder,
/C -- Extract files only to the folder when used also with /T.
/C: -- Override Install Command defined by author.
```

So the next step is to extract the contents of setup.exe to a folder.

```
D:\Downloads> setup.exe /t:D:\Downloads\dotnet11sdk /c

D:\Downloads\dotnet11sdk> dir
 Volume in drive D has no label.
 Volume Serial Number is 40F1-817D

 Directory of D:\Downloads\dotnet11sdk

04/02/2015  03:59 PM              .
04/02/2015  03:59 PM              ..
02/20/2003  06:48 PM            94,208 Install.exe
09/26/2001  05:07 PM         1,707,856 InstMsi.exe
09/11/2001  02:46 PM         1,821,008 InstMsiW.exe
03/29/2003  02:55 AM        81,380,073 netfxsd1.cab
03/29/2003  02:55 AM        26,264,064 netfxsdk.msi
               5 File(s)    111,267,209 bytes
               2 Dir(s)  64,240,427,008 bytes free
```

The netfxsd1.cab file contains all of the files to be installed by netfxsdk.msi. All you need to do is open the CAB file using Windows Explorer and extract the following two files:

<ul>
    <li>FL_msvcp71_dll_____X86.3643236F_FC70_11D3_A536_0090278A1BB8</li>
    <li>FL_msvcr71_dll_____X86.3643236F_FC70_11D3_A536_0090278A1BB8</li>
</ul>

Then just rename the extracted files and copy them to the ARAPI.NET folder.

```
D:\Downloads\dotnet11sdk> ren FL_msvcp71_dll_____X86.3643236F_FC70_11D3_A536_0090278A1BB8 msvcp71.dll
D:\Downloads\dotnet11sdk> ren FL_msvcr71_dll_____X86.3643236F_FC70_11D3_A536_0090278A1BB8 msvcr71.dll
```

Now your applications should work.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>109</wp:post_id>
  <wp:post_date>2015-04-02 15:20:54</wp:post_date>
  <wp:post_date_gmt>2015-04-02 23:20:54</wp:post_date_gmt>
  <wp:post_modified>2020-03-16 11:58:57</wp:post_modified>
  <wp:post_modified_gmt>2020-03-16 19:58:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixing-the-specified-module-could-not-be-found-errors-when-using-arapi-net</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="arapi"><![CDATA[ARAPI]]></category>
  <category domain="post_tag" nicename="bmc-software"><![CDATA[BMC Software]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="remedy"><![CDATA[Remedy]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a0fae371111e86a27de15f2ef96ed13e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_428f311b2090b301a1fbf3a85714f2d2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_86470af44dc5e420512ca18a3eca1fc4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_42231a3d6bddc33b2a0dac700a8efb9c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad5e90ded33affbaa9a9147cd3b3818e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9624fc6464802ccac6c560f510511ff6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_886c963c31be617e66802f8be0a3f590</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/NQqkERf1a2z]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5989536817647464448&type=U&a=PNRv]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6525cbad4982022bfcfecec0e55464f7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a488686d1776c0e516ae4e339cdf4cf5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_88a0ad7e5ec7bce261146f86259fa936</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10205450993888748]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212599</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[swsamwa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/Jkjj7lvHwY]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27350063832]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0ebc356476b6f3b694c1e5a4a79e0ae2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f44522268b7670a567bc19b870d1d107</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_522dc9974f04571d674a918713cc4190</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5813764ffb2bf99dd4ddba2e38bfb076</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3a8400e472affb9a892731391bdc2119</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a5bd61e528bd6bff7b9ac7f14e0e933c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a3a7dad89d31536b233565cef38d8cb3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_76b85c6ca9f34cfa252d83e1ddc0a392</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bebfbaf631f6889456e3f1c4f78debf0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6dc0b3393e7f3ab66022f83ddd19d5e6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_43a300440c8d7f624e9dd5df8ede7773</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_27621fc5b38914f62581006e3e47d7a2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04224b073bd052937a9bf27a8554f101</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1f69c9cb852b57f8b75e740fa7a60fb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>93</wp:comment_id>
    <wp:comment_author><![CDATA[Hard to believe that I have been blogging for 1 year already | Sean on IT]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://seanonit.wordpress.com/2015/10/22/hard-to-believe-that-i-have-been-blogging-for-1-year-already/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2016-09-29 14:51:43</wp:comment_date>
    <wp:comment_date_gmt>2016-09-29 22:51:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Fixing &#8220;The specified module could not be found. errors when using ARAPI.NET&#8221; [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1475189503.50302791595458984375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1475191347]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1475191347.794333934783935546875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>146</wp:comment_id>
    <wp:comment_author><![CDATA[Renan]]></wp:comment_author>
    <wp:comment_author_email>rmanola@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>164.85.19.104</wp:comment_author_IP>
    <wp:comment_date>2017-05-30 05:11:14</wp:comment_date>
    <wp:comment_date_gmt>2017-05-30 13:11:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is an old post but I'm typing this reply to thank you very much for this information, I was using the ARAPI.NET very fine on WIndows 7 x64, however, on trying to use on the new Windows Server 2012 x64 boxes I ran into this same error message: Exception calling "Login" with "5" argument(s): "Could not load file or assembly 'BMC.arnettoc.dll"

I googled this error and it returned only three hits, all from this blog! You can't imagine how glad I am to find out that the only information on the web about  this error acctually solves it!

Thanks a lot!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1496149875.3402450084686279296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1496158039]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1496154113.594521999359130859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1496158039]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1496158039.8135550022125244140625;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>147</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>131.107.160.209</wp:comment_author_IP>
    <wp:comment_date>2017-05-30 07:32:45</wp:comment_date>
    <wp:comment_date_gmt>2017-05-30 15:32:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Glad I could help :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>146</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1496158367]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1496158366]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1496158367.12868595123291015625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1143</wp:comment_id>
    <wp:comment_author><![CDATA[athoss]]></wp:comment_author>
    <wp:comment_author_email>andreas.thoss@t-systems.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.146.191.153</wp:comment_author_IP>
    <wp:comment_date>2020-02-21 05:18:34</wp:comment_date>
    <wp:comment_date_gmt>2020-02-21 13:18:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[And 5 years later... googled for hours now to find this

THANKS A LOT

now the old arapi thing gets a dotnet core api-controller frontend ;)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1582291115.377631;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[40953048326]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1582294768.057549;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1582297624]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1582297349]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1582297349.821294;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1582297369.78667;s:5:"event";s:17:"status-unapproved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1582297624.511302;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Getting incident notes from Remedy using ARAPI.NET from PowerShell</title>
  <link>https://seanonit.wordpress.com/2015/04/28/getting-incident-notes-from-remedy-using-arapi-net-from-powershell/</link>
  <pubDate>Tue, 28 Apr 2015 22:34:02 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?p=120</guid>
  <description/>
  <content:encoded><![CDATA[Here is another example of using ARAPI.NET from PowerShell. This is a script I wrote and use every day to retrieve notes from a Remedy Incident. As a manager, I rarely use Remedy to work incidents. However, I frequently need to review the notes and ensure that incidents are being resolved efficiently. Logging into Remedy, finding the incident, and reviewing all of the notes can be a time-consuming process. This script makes it very easy for me to quickly see all of the notes and provide status updates to my management.

All I need is the incident number. Using the incident number passed on the command line the script searches the HPD:Search-Worklog form for Work Log entries for the specified Incident.

The output looks like this:

```
PS E:\> .\get-incident.ps1 IR0000000183197
===============================
incident      : IR0000000183197
submitdate    : 4/28/2015 8:22:47 AM
customer      : serverops
workphone     : 1 206 555-1212
source        : Systems Management
servicetype   : Monitoring Event
status        : Assigned
assignedgroup : Windows OS
assignee      :
opcat1        : Business Process
opcat2        :
opcat3        :
prodcat1      : Software
prodcat2      : Operating System
prodcat3      : Server OS
impact        : Moderate
urgency       : Medium
priority      : Medium
summary       : server1.contoso.net Logical disk C: on host server1.contoso.net has 10 % free space remaining.
notes         :

-------------------------------
date        : 4/28/2015 8:22:42 AM
submitter   : remedyuser15
logtype     : General Information
Attachment1 :
Attachment2 :
Attachment3 :
description : Alert Info for Ticketing:
              host: server1.contoso.net
              Severity: MINOR
              Message: Logical disk C: on host server1.contoso.net has 10 % free space remaining.
              Object: C:
              ITSM Queue: Windows OS
              Modified: 4/28/2015 8:12:19 AM
===============================
```

The pattern of the script is the same as my previous examples. I set up the parameters (which can be overridden on the command line) to connect to the Remedy application server. Then I define the field IDs that I want to retrieve. I also define some string dictionaries that I use to convert numeric values returned by Remedy into the text values that are displayed by the mid-tier.

[code language="powershell" title="get-incident.ps1"]
param ($searchTerm,
       $fieldID=1000000161,
       $appServer = "appserver.contoso.net",
       $svcAccount = "remedyuserid",
       $svcPassword = "remedypassword",
       $remAuthDomain = "",
       $arSrvrPort = 51100,
       $formName = "HPD:Search-Worklog")

add-type -path 'C:\Program Files (x86)\BMC Software\ARAPI80.NET\BMC.ARSystem.dll'

$incFields = @{         7="Status         ";
                200000003="ProdCat 1      ";
                200000004="ProdCat 2      ";
                200000005="ProdCat 3      ";
               1000000000="Description    ";
               1000000018="Last Name      ";
               1000000019="First Name     ";
               1000000056="Phone Number   ";
               1000000063="OpCat 1        ";
               1000000064="OpCat 2        ";
               1000000065="OpCat 3        ";
               1000000099="Service Type   ";
               1000000151="Decription     ";
               1000000161="Incident Number";
               1000000162="Urgency        ";
               1000000163="Impact         ";
               1000000164="Priority       ";
               1000000215="Source         ";
               1000000217="Assigned Group ";
               1000000218="Assignee       ";
               1000000422="Owner Group    ";
               1000000560="Reported Date  ";
               1000000881="Status Reason  ";
               1000005782="Contact Last   ";
               1000005783="Contact First  ";
               1000005785="Contact Phone  ";
              }

$wlFields = @{  301394441="Description    ";
               1000000157="Submit Date    ";
               1000000159="Submitter      ";
               1000000170="Work Log Type  ";
               1000000351="Attachment01   ";
               1000000352="Attachment02   ";
               1000000353="Attachment03   ";
               1000002134="Work Log Date  ";
               1000003610="Summary        ";
             }
$arserver = new-object BMC.ARSystem.Server
$arserver.Login($appServer, $svcAccount, $svcPassword, $remAuthDomain, $arSrvrPort)
$qualifier = "'{0}' = ""{1}""" -f $fieldID,$searchTerm

[BMC.ARSystem.EntryListFieldList] $formEntryFieldList = new-object BMC.ARSystem.EntryListFieldList
$incFields.Keys | %{ $formEntryFieldList.AddField($_) }
$wlFields.Keys  | %{ $formEntryFieldList.AddField($_) }

$impactvalues = @{ 1000="Extensive"; 2000="Significant"; 3000="Moderate"; 4000="Minor" }
$urgencyvalues = @{ 1000="Critical"; 2000="High"; 3000="Medium"; 4000="Low" }
$priorityvalues = @{ 0="Critical"; 1="High"; 2="Medium"; 3="Low" }
$statusvalues = @{ 0="New"; 1="Assigned"; 2="In Progress"; 3="Pending"; 4="Resolved"; 5="Closed"; 6="Cancelled"; }
$servicevalues = @{ 0="User Restoration"; 1="User Service Request"; 2="System Restoration"; 3="Monitoring Event"; }
$sourcevalues =  @{ 1000="Direct Input"; 2000="Email"; 3000="External Escalation"; 4000="Fax"; 4200="Self Service"; 5000="Systems Management"; 6000="Phone"; 7000="Voice Mail"; 8000="Walk In"; 9000="Web"; 10000="Other"; 11000="BMC Impact Manager Event"; }
$worklogtypes = @{
   1000="----- Customer Inbound -----";
   2000="Customer Communication";
   3000="Customer Follow-up";
   4000="Customer Status Update";
   5000="----- Customer Outbound -----";
   6000="Closure Follow Up";
   7000="Detail Clarification";
   8000="General Information";
   9000="Resolution Communications";
   10000="Satisfaction Survey";
   11000="Status Update";
   12000="----- General -----";
   13000="Incident Task / Action";
   14000="Problem Script";
   15000="Working Log";
   16000="Email System";
   17000="Paging System";
   18000="BMC Impact Manager Update";
   35000="Chat";
   36000="B2B Vendor Update";
 }

[BMC.ARSystem.EntryFieldValueList] $fieldValues = $arserver.GetListEntryWithFields($formName, $qualifier, $formEntryFieldList, 0, 0);
$irfields = $fieldValues[0].fieldvalues

$irheader = [ordered]@{
               incident     =$irfields[1000000161];
               customer     =$irfields[1000000019] + " " + $irfields[1000000018];
               workphone    =$irfields[1000000056];
               source       =$sourcevalues[$irfields[1000000215]];
               servicetype  =$servicevalues[$irfields[1000000099]];
               status       =$statusvalues[$irfields[0000000007]];
               assignedgroup=$irfields[1000000217];
               assignee     =$irfields[1000000218];
               opcat1       =$irfields[1000000063];
               opcat2       =$irfields[1000000064];
               opcat3       =$irfields[1000000065];
               prodcat1     =$irfields[0200000003];
               prodcat2     =$irfields[0200000004];
               prodcat3     =$irfields[0200000005];
               impact       =$impactvalues[$irfields[1000000163]];
               urgency      =$urgencyvalues[$irfields[1000000162]];
               priority     =$priorityvalues[$irfields[1000000164]];
               summary      =$irfields[1000000000];
               notes        =$irfields[1000000151];
             }

"==============================="
new-object -type PSObject -prop $irheader

foreach ($wl in $fieldvalues) {
   "-------------------------------"
   #$wlFields.Keys | %{ "[{0:0000000000}] {1} = {2}" -f $_,$wlFields[$_],$wl.fieldvalues[$_].tostring() }
   $wldata = [ordered]@{
                date        = $wl.fieldvalues[1000002134];
                submitter   = $wl.fieldvalues[1000000159];
                logtype     = $worklogtypes[$wl.fieldvalues[1000000170]];
                Attachment1 = $wl.fieldvalues[1000000351];
                Attachment2 = $wl.fieldvalues[1000000352];
                Attachment3 = $wl.fieldvalues[1000000353];
                description = $wl.fieldvalues[0301394441];
             }
   new-object -type PSObject -prop $wldata
}
"==============================="

$arserver.Logout()
```]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>120</wp:post_id>
  <wp:post_date>2015-04-28 14:34:02</wp:post_date>
  <wp:post_date_gmt>2015-04-28 22:34:02</wp:post_date_gmt>
  <wp:post_modified>2017-02-09 08:18:34</wp:post_modified>
  <wp:post_modified_gmt>2017-02-09 16:18:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>getting-incident-notes-from-remedy-using-arapi-net-from-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="arapi"><![CDATA[ARAPI]]></category>
  <category domain="post_tag" nicename="arapi-net"><![CDATA[ARAPI.NET]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/V4gDwzm8xva]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:11:"google_plus";a:1:{s:21:"118419266344699582532";b:1;}s:7:"twitter";a:1:{i:11212690;s:53:"https://twitter.com/swsamwa/status/781628729202061313";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=5998947108609085440&type=U&a=-PC5]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27350002458]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11153016</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[swsamwa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Create Remedy Work Orders with PowerShell</title>
  <link>https://seanonit.wordpress.com/2015/06/10/create-remedy-work-orders-with-powershell/</link>
  <pubDate>Wed, 10 Jun 2015 21:03:03 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?p=126</guid>
  <description/>
  <content:encoded><![CDATA[In previous posts, I have shown you how to query for data in Remedy using PowerShell and ARAPI.NET. Creating or updating information in Remedy is not much different.

<ol>
    <li>Log into the AR Server</li>
    <li>Build a list of Field IDs and values that you want the Work Order to contain</li>
    <li>Use the CreateEntry method to create a new Work Order</li>
    <li>Create a Qualifier string used to query for the newly created Work Order</li>
    <li>Build a list of Field IDs that you want to retrieve from Remedy</li>
    <li>Query a Remedy form (passing in the qualifier and field list)</li>
    <li>Process the results</li>
    <li>Log off the AR Server</li>
</ol>

The following script is a simple example to create a single Work Order in Remedy. It could easily be adapted to read from a CSV file or other data source to create multiple work orders. In fact, I wrote a tool in C# that is designed to create multiple Work Orders from CSV data. We use it to create the same Work Order task for multiple individual store locations.

The hardest part about creating items in Remedy is knowing which form to use and which data fields are required. It is not always obvious which fields are required. You may have to use Developer Studio to inspect the workflow and filter logic to figure all of that out. Also, fields like Product Categories, Operational Categories, Support Queues, etc. will have values specific to your environment.

[code language="powershell" title="create-wo.ps1"]
param ($appServer = "appserver.contoso.net",
       $svcAccount = "remedyuserid",
       $svcPassword = "remedypassword",
       $remAuthDomain = "",
       $arSrvrPort = 51100,
       $formName = "WOI:WorkOrderInterface_Create")

add-type -path 'C:\Program Files (x86)\BMC Software\ARAPI80.NET\BMC.ARSystem.dll'

$arserver = New-Object -type BMC.ARSystem.Server
$arserver.Login($appServer, $svcAccount, $svcPassword, $remAuthDomain, $arSrvrPort)

$fieldIDs = @{     2="";           #Submitter
                   3="";           #Create Date
          1000000182="";           #Work Order ID
          ### Store identity
          1000000082="Contoso";    #Company
           301593100="s01174";     #RequesterLoginID
          1000000001="HQ";         #Location
          1000000018="Bloggs";     #Last Name
          1000000019="Joe";        #First Name
          ### WO Actions
          1000000000="Summary: short version of description";
          1000000151="Details: long version of description";
          1000000164="Low";
          1000000181="Project";
                   7="Assigned";
          1000000076="CREATE";
          ### Op Cat Tiers 1,2,3
          1000000063="Request";
          1000000064="Add hardware";
          1000000065="Wiring Closet";
          ### Prod Cat Tiers 1,2,3
          1000001270="Hardware Lifecycle";
          1000001271="Hardware replacement";
          1000001272="Internal Project";
          ### Product
          1000002268="Wireless Access";
          ### Manager Support Hierarchy
          1000000014="Infrastructure";  #Manager Support Org
          1000000015="Network";         #Manager Support Group
          1000000251="Contoso";         #Manager Company
          ### Support Hierarchy
          1000003227="Infrastructure";  #Support Org
          1000003228="Network";         #Support Group
          1000003229="Contoso";         #Company
          ### Customer Info Returned
          1000003296=""; #Customer Person ID
          1000003297=""; #Customer First Name
          1000003298=""; #Customer Last Name
          1000003299=""; #Customer Company
          1000003302=""; #Customer Email
          1000003306=""; #Customer Phone Number
         }
try
{

   #Build the list of field values to be used in the Create request - skip blank values
   [BMC.ARSystem.FieldValueList] $woValueList = New-Object -type BMC.ARSystem.FieldValueList
   $fieldIDs.keys | ForEach-Object {
      if ($fieldIDs[$_] -ne "") {
         $woValueList.Add($_,$fieldIDs[$_])
      }
   }
   #Create then new WO with listed values
   $entryID = $arserver.CreateEntry($formName, $woValueList);

   #Build a new field list containing ALL the fields you want returned
   [BMC.ARSystem.EntryListFieldList] $woEntryFieldList = New-Object -type BMC.ARSystem.EntryListFieldList
   $fieldIDs.Keys | ForEach-Object { $woEntryFieldList.AddField($_); }

   #Query for the newly created WO by its EntryID
   $strSQL = "'1' = {0}" -f $entryID
   [BMC.ARSystem.EntryFieldValueList] $woEntryValueList = New-Object -type BMC.ARSystem.EntryFieldValueList
   $woEntryValueList = $arserver.GetListEntryWithFields($formName, $strSQL, $woEntryFieldList, 0, 50);

   #Output the results
   $fieldIDs.Keys | ForEach-Object { "[{0:0000000000}] {1}" -f $_,$woEntryValueList.fieldvalues[$_] }
}
catch
{
   $_
}
$arserver.Logout()
```

Updating values on an existing item in Remedy is not much different. The process is mostly the same but you are using the SetEntry method instead of the CreateEntry method. I will try to share an update example in an upcoming post.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>126</wp:post_id>
  <wp:post_date>2015-06-10 13:03:03</wp:post_date>
  <wp:post_date_gmt>2015-06-10 21:03:03</wp:post_date_gmt>
  <wp:post_modified>2017-02-09 08:17:09</wp:post_modified>
  <wp:post_modified_gmt>2017-02-09 16:17:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>create-remedy-work-orders-with-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="arapi"><![CDATA[ARAPI]]></category>
  <category domain="post_tag" nicename="arapi-net"><![CDATA[ARAPI.NET]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:11212599;s:38:"https://facebook.com/10205753291926010";}s:7:"twitter";a:1:{i:11212690;s:53:"https://twitter.com/swsamwa/status/608741203559874560";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11542002829]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11152934</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212599</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11153016</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[swsamwa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/1WvqQGdcxRv]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_9011490</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Adding a Contact to a Distribution List with PowerShell</title>
  <link>https://seanonit.wordpress.com/2015/07/21/adding-a-contact-to-a-distribution-list-with-powershell/</link>
  <pubDate>Tue, 21 Jul 2015 18:27:02 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?p=135</guid>
  <description/>
  <content:encoded><![CDATA[The PowerShell ActiveDirectory module has a lot of great features that I use on a daily basis. However, there is one shortcoming that I have struggled with for a while. I did a lot of internet searching and testing to see if I was missing some hidden secret. But, alas, this is one task that the AD module does not do.

Here is the scenario. We have a lot of AD Groups (Distribution Lists) we use for notification messages. We want to send notifications to mobile devices. We do this by sending an email to the devices email address. For example:

<pre>2065551212@mobilecarrier.xyz.com</pre>

These external email addresses are created as Contact objects in AD.

The problem is that the cmdlets for managing AD group objects only allow you to add objects that have a SamAccountName (and therefore a SID) to a group. This is fine for user and group objects. But Contact objects to not have SIDs. So now what do you do.

The answer is you do it the old way you would have done it in VBScript; use ADSI.

[code language="powershell" title="Add Contract to Group Membership"]
$dlGroup = [adsi]'LDAP://CN=DL-Group Name,OU=Corp Distribution Lists,DC=contoso,DC=net'
$dlGroup.Member.Add('CN=mobile-username,OU=Corp Contacts,DC=contoso,DC=net')
$dlGroup.psbase.CommitChanges()
```]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>135</wp:post_id>
  <wp:post_date>2015-07-21 10:27:02</wp:post_date>
  <wp:post_date_gmt>2015-07-21 18:27:02</wp:post_date_gmt>
  <wp:post_modified>2020-03-16 12:01:18</wp:post_modified>
  <wp:post_modified_gmt>2020-03-16 20:01:18</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>adding-a-contact-to-a-distribution-list-with-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="activedirectory"><![CDATA[ActiveDirectory]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12948308341]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=6029326655175086080&type=U&a=kOtw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_9011484</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:11212690;s:53:"https://twitter.com/swsamwa/status/623560974780338176";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11153016</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[swsamwa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/7n67xtJEZL5]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_9011490</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>36</wp:comment_id>
    <wp:comment_author><![CDATA[Anthony]]></wp:comment_author>
    <wp:comment_author_email>anthony.r.lopez@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>153.2.247.32</wp:comment_author_IP>
    <wp:comment_date>2015-09-18 10:20:07</wp:comment_date>
    <wp:comment_date_gmt>2015-09-18 18:20:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm hitting this issue now that we are upgrading from Exchange 2007 to 2013. This operation works fine with the Exchange PowerShell command Add/Remove-DistributionGroupMember, but because of split permissions, we now must the AD PowerShell command Add/Remove-ADGroupMember. I was thinking I may have to do this the old fashioned way, and you just confirmed it for me.
Thanks,
Anthony]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1442600408.352703094482421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1442600409]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14925598923]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1442600813]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1442600813]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1442600813.26169109344482421875;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>141</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>174.61.255.188</wp:comment_author_IP>
    <wp:comment_date>2017-05-08 16:15:46</wp:comment_date>
    <wp:comment_date_gmt>2017-05-09 00:15:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is PowerShell, not VBScript.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>140</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494288948.3854310512542724609375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494288947]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[4842836669]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1494288949]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>140</wp:comment_id>
    <wp:comment_author><![CDATA[Potpal]]></wp:comment_author>
    <wp:comment_author_email>khait@shaw.ca</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.84.136.95</wp:comment_author_IP>
    <wp:comment_date>2017-05-08 13:11:31</wp:comment_date>
    <wp:comment_date_gmt>2017-05-08 21:11:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Sean, I'm getting "Expected end of statement" error Line 1 Char: 12 code: 800A0401 when pasting above code into .vbs file.  Which puts the char in question at the  " just before C:\ .

To make sure my CSV file is correct I ran each line of your original code manually with the CN from the input file and it works wonderfully.  Feel like we are almost there just not sure what am I missing to get the bulk import code working, appreciate your help.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494277892.9419629573822021484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[4842825535]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494282834.6004199981689453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1494288920]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494288920]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494288920.904057025909423828125;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>139</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>131.107.147.169</wp:comment_author_IP>
    <wp:comment_date>2017-05-08 07:08:34</wp:comment_date>
    <wp:comment_date_gmt>2017-05-08 15:08:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Import-CSV "C:\Scripts\Contacts\ContactMembership.csv" | ForEach {
  $dlGroup = [adsi]('LDAP://' + $_.GroupCN
  $dlGroup.Member.Add($_.UserCN)
  $dlGroup.psbase.CommitChanges()
}]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>138</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[4827756125]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1494256115]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494256115.2567141056060791015625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494256114]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>138</wp:comment_id>
    <wp:comment_author><![CDATA[Potpal]]></wp:comment_author>
    <wp:comment_author_email>khait@shaw.ca</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>24.84.136.95</wp:comment_author_IP>
    <wp:comment_date>2017-05-08 06:56:04</wp:comment_date>
    <wp:comment_date_gmt>2017-05-08 14:56:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, I meant to reply to Rody's comment for his powershell approach.  For your ADSI solution is there way to add multiple contacts with a CSV file?  Like you I found that there isn't a simple solution to add bulk contacts to a AD Groups.  Any additional pointers appreciated.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[4827755060]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1494256113]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494256113]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494256114.0874350070953369140625;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494255365.0870130062103271484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>132</wp:comment_id>
    <wp:comment_author><![CDATA[Roldy]]></wp:comment_author>
    <wp:comment_author_email>thenightreaper@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>137.157.8.253</wp:comment_author_IP>
    <wp:comment_date>2017-04-25 22:08:26</wp:comment_date>
    <wp:comment_date_gmt>2017-04-26 06:08:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is my approach using more conventional PowerShell cmdlets.

$GroupMembers = @()
Get-ADObject -Filter {Company -eq "Contoso"} | ForEach-Object {$GroupMembers += $_.DistinguishedName}
Set-ADObject -Identity "CN=Contoso Group,OU=Groups,DC=contoso,DC=com" -Replace @{member=$GroupMembers}]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493186908.238605976104736328125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[4415143192]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493192241.5704479217529296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1493212833]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1493212833]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493212833.8198831081390380859375;s:5:"event";s:15:"status-approved";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>133</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>131.107.174.81</wp:comment_author_IP>
    <wp:comment_date>2017-04-26 05:25:00</wp:comment_date>
    <wp:comment_date_gmt>2017-04-26 13:25:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yeah, that works as well. The difference is that you are replacing the entire group membership instead of adding a single member.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>132</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1493213101]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493213101.7642910480499267578125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[4415289994]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1493213102]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>137</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Wheeler]]></wp:comment_author>
    <wp:comment_author_email>swsamwa@live.com</wp:comment_author_email>
    <wp:comment_author_url>http://seanonit.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>131.107.160.209</wp:comment_author_IP>
    <wp:comment_date>2017-05-08 05:24:53</wp:comment_date>
    <wp:comment_date_gmt>2017-05-08 13:24:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am not sure you read my post. The point of my article is to point out at the AD cmdlets expect and Identity and a contact is not an identity. That is why I used ADSI to solve the problem.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>133</wp:comment_parent>
    <wp:comment_user_id>73837961</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[4824600555]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1494249894]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494249894.1802060604095458984375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"swsamwa";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494249893]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Opening the door to the Mystery of Dates in PowerShell</title>
  <link>https://seanonit.wordpress.com/2015/11/27/opening-door-to-the-mystery-of-dates-in-powershell/</link>
  <pubDate>Sat, 28 Nov 2015 00:26:43 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?p=143</guid>
  <description/>
  <content:encoded><![CDATA[Formatting and converting dates can be very confusing. Every programming language, operating system, and runtime environment seem to do it differently. And part of the difficulty in conversion is knowing what units you are starting with.

First, it is helpful to know the <a href="https://en.wikipedia.org/wiki/Epoch_(reference_date)">Epoch</a> (or starting date) a stored value is based on. Wikipedia has a good article on this. Here is a brief excerpt.

<table>
<tbody>
<tr>
<th>Epoch date</th>
<th>Notable uses</th>
<th>Rationale for selection</th>
</tr>
<tr>
<td>January 1, AD 1</td>
<td>Microsoft .NET</td>
<td>Common Era, ISO 2014, RFC 3339</td>
</tr>
<tr>
<td>January 1, 1601</td>
<td>NTFS, COBOL, Win32/Win64</td>
<td>1601 was the first year of the 400-year Gregorian calendar cycle at the time Windows NT was made</td>
</tr>
<tr>
<td>January 0, 1900</td>
<td>Microsoft Excel, Lotus 1-2-3</td>
<td>While logically January 0, 1900 is equivalent to December 31, 1899, these systems do not allow users to specify the latter date.</td>
</tr>
<tr>
<td>January 1, 1904</td>
<td>Apple Inc.'s Mac OS through version 9</td>
<td>1904 is the first leap year of the 20th century</td>
</tr>
<tr>
<td>January 1, 1970</td>
<td>Unix Epoch aka POSIX time. Used by Unix and Unix-like systems (Linux, Mac OS X), and programming languages: most C/C++ implementations, Java, JavaScript, Perl, PHP, Python, Ruby, Tcl, ActionScript.</td>
<td></td>
</tr>
<tr>
<td>January 1, 1980</td>
<td>IBM BIOS INT 1Ah, DOS, OS/2, FAT12, FAT16, FAT32, exFAT filesystems</td>
<td>The IBM PC with its BIOS as well as 86-DOS, MS-DOS and PC DOS with their FAT12 file system were developed and introduced between 1980 and 1981</td>
</tr>
</tbody>
</table>

<h2><strong>Common Date Conversion Tasks</strong></h2>

<strong>WMI Dates</strong>

```powershell
PS > $installDate = (Get-WmiObject win32_operatingsystem | select Installdate ).InstallDate
PS > [system.management.managementdatetimeconverter]::ToDateTime($InstallDate)
Friday, September 12, 2008 6:50:57 PM

PS > [System.Management.ManagementDateTimeConverter]::ToDmtfDateTime($(get-date))
20151127144036.886000-480
```
<strong>Excel dates</strong> - Excel stores dates as sequential serial numbers so that they can be used in calculations. By default, January 1, 1900, is serial number 1.

```powershell
PS > ((Get-Date).AddDays(1) - (get-date "12/31/1899")).Days
42335
```
In this example, the value Days is 42335 which is the serial number for 11/27/2015 in Excel. The date "12/31/1899" is equivalent to January 0, 1900. The difference between "12/31/1899" and "11/27/2015" is 42334 but since the serial numbers start a 1 you need to add 1 day to get the serial number for "11/27/2015".

<strong>Converting from custom string formats</strong>

```powershell
PS > $information = '12Nov(2012)18h30m17s'
PS > $pattern = 'ddMMM\(yyyy\)HH\hmm\mss\s'
PS > [datetime]::ParseExact($information, $pattern, $null)
Monday, November 12, 2012 6:30:17 PM
```

<strong>FILETIME conversion</strong> - FILETIME is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).

```powershell
PS > get-aduser username -prop badPasswordTime,lastLogonTimestamp | select badPasswordTime,lastLogonTimestamp
badPasswordTime : 130927962789982434
lastLogonTimestamp : 130931333173599571

PS > [datetime]::fromfiletime(130927962789982434)
Monday, November 23, 2015 3:51:18 PM

PS > [datetime]::fromfiletime(130931333173599571)
Friday, November 27, 2015 1:28:37 PM
```

<strong>CTIME or Unix format</strong> - is an integral value representing the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC (i.e., a Unix timestamp).

```powershell
PS > $epoch = get-date "1/1/1970"
PS > $epoch.AddMilliseconds(1448302797803)
Monday, November 23, 2015 6:19:57 PM

PS > $epoch.AddSeconds(1448302797.803)
Monday, November 23, 2015 6:19:57 PM
```

<h2><strong>References</strong></h2>

Standard Date and Time Format Strings in .NET
<a href="https://docs.microsoft.com/dotnet/standard/base-types/standard-date-and-time-format-strings">https://docs.microsoft.com/dotnet/standard/base-types/standard-date-and-time-format-strings</a>

Custom Date and Time Format Strings in .NET
<a href="https://docs.microsoft.com/dotnet/standard/base-types/custom-date-and-time-format-strings">https://docs.microsoft.com/dotnet/standard/base-types/custom-date-and-time-format-strings</a>

Formatting Dates and Times in PowerShell
<a href="https://docs.microsoft.com/previous-versions/windows/it-pro/windows-powershell-1.0/ee692801(v=technet.10)">https://docs.microsoft.com/previous-versions/windows/it-pro/windows-powershell-1.0/ee692801(v=technet.10)</a>

PowerTip: Use PowerShell to Format Dates
<a href="https://devblogs.microsoft.com/scripting/powertip-use-powershell-to-format-dates/">https://devblogs.microsoft.com/scripting/powertip-use-powershell-to-format-dates/</a>

Parsing Custom Date and Time Formats
<a href="http://community.idera.com/powershell/powertips/b/tips/posts/parsing-custom-date-and-time-formats">http://community.idera.com/powershell/powertips/b/tips/posts/parsing-custom-date-and-time-formats</a>
<a href="https://docs.microsoft.com/dotnet/api/system.datetime.parseexact#overloads">https://msdn.microsoft.com/en-us/library/system.datetime.parseexact(v=vs.110).aspx</a>

Wikipedia - Epoch (reference date)
<a href="https://en.wikipedia.org/wiki/Epoch_(reference_date)">https://en.wikipedia.org/wiki/Epoch_(reference_date)</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>143</wp:post_id>
  <wp:post_date>2015-11-27 16:26:43</wp:post_date>
  <wp:post_date_gmt>2015-11-28 00:26:43</wp:post_date_gmt>
  <wp:post_modified>2020-03-16 12:07:17</wp:post_modified>
  <wp:post_modified_gmt>2020-03-16 20:07:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>opening-door-to-the-mystery-of-dates-in-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_88b1900409ed3dfe24c5863e3aac722c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f7821b60dce330540f445c2afd8a194</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_21d7c85288bd38bb3937e24a8e92484e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e43037db6188dd0f14ee11ecd36d49d4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6b578c02d707eff7cfbaf570387d2b05</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c95c88c7c5cf355e33b60a5b37f6e61e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_be23957578ea15eb8d8bcd1daf2c495d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[73837961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:11212599;s:38:"https://facebook.com/10206873907620702";}s:7:"twitter";a:1:{i:11212690;s:53:"https://twitter.com/swsamwa/status/670398424773099521";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17263350299]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=5410476&stype=M&topic=6076164089535619072&type=U&a=OC-s]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_9011484</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11152934</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212599</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11153016</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[swsamwa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/118419266344699582532/posts/LJafwrKMUab]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_9011490</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_11212599</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042278</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_9042272</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>mysterydate</title>
  <link>https://seanonit.wordpress.com/2015/11/27/opening-door-to-the-mystery-of-dates-in-powershell/mysterydate/</link>
  <pubDate>Fri, 27 Nov 2015 23:41:48 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2015/11/mysterydate.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>144</wp:post_id>
  <wp:post_date>2015-11-27 15:41:48</wp:post_date>
  <wp:post_date_gmt>2015-11-27 23:41:48</wp:post_date_gmt>
  <wp:post_modified>2015-11-27 15:41:48</wp:post_modified>
  <wp:post_modified_gmt>2015-11-27 23:41:48</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>mysterydate</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>143</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2015/11/mysterydate.jpg</wp:attachment_url>
</item>
<item>
  <title>time-flies-away-1178024</title>
  <link>https://seanonit.wordpress.com/time-flies-away-1178024/</link>
  <pubDate>Thu, 01 Dec 2016 18:17:59 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2016/12/time-flies-away-1178024.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>215</wp:post_id>
  <wp:post_date>2016-12-01 10:17:59</wp:post_date>
  <wp:post_date_gmt>2016-12-01 18:17:59</wp:post_date_gmt>
  <wp:post_modified>2016-12-01 10:17:59</wp:post_modified>
  <wp:post_modified_gmt>2016-12-01 18:17:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>time-flies-away-1178024</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2016/12/time-flies-away-1178024.jpg</wp:attachment_url>
</item>
<item>
  <title>Using Git from PowerShell</title>
  <link>https://seanonit.wordpress.com/2016/12/05/using-git-from-powershell/</link>
  <pubDate>Mon, 05 Dec 2016 21:37:09 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?p=223</guid>
  <description/>
  <content:encoded><![CDATA[This year has been full of changes for me. One of the biggest changes is that my job requires me to use Git and GitHub for almost all of my work. Before this new job, I had never used Git. By default, the Git installer installs the bash command shell. Most of the documentation is written assuming that you are using bash. However, I prefer to work in PowerShell. In this article I will show how I set up my environment to enable Git functionality in PowerShell. This is not meant to be a tutorial on using Git but, rather, a example of what works for me and for my workflow.

<h2>Download and install the Git for Windows</h2>

First thing is to install Git for Windows.

Download and run the <a href="https://git-for-windows.github.io/">Git for Windows</a> installer. As you step through the installation wizard you are presented with several options. The following is a list of the options on each page of the installation wizard with the reasoning behind my choice.

<ul>
    <li>The <strong>Select Components</strong> page
<ul>
    <li>Check <strong>Git LFS (Large File Support)</strong></li>
    <li>Check <strong>Associate .git* configuration files with the default text</strong></li>
    <li>Check <strong>Use a TrueType font in all console windows
</strong>I prefer the TrueType font Consolas as my monospaced font for command shells and code editors.</li>
</ul>
</li>
    <li>The <strong>Choosing the default editor used by Git</strong> page
<ul>
    <li>Select <strong>Use Visual Studio Code as Git's default editor</strong>
VS Code does everything.</li>
</ul>
</li>
    <li>The <strong>Adjusting your PATH environment</strong> page
<ul>
    <li>Select <strong>Use Git from the Windows Command Prompt
</strong>This adds the Git tools to your PATH so that it works for Cmd, PowerShell, or bash.</li>
</ul>
</li>
    <li>The <strong>Choosing HTTPS transport backend</strong> page
<ul>
    <li>Select <strong>Use the native Windows Secure Channel library</strong></li>
</ul>
</li>
    <li>The <strong>Configure the line ending conversions</strong> page
<ul>
    <li>Select <strong>Checkout Windows-style, commit Unix-style line endings
</strong>This is the recommended setting on Windows and provides the most compatibility for cross-platform projects.</li>
</ul>
</li>
    <li>The <strong>Configuring the terminal emulator to use with Git bash</strong> page
<ul>
    <li>Select <strong>Use Windows' default console window
</strong>This is the console that PowerShell uses and works best with other Windows console-based applications.</li>
</ul>
</li>
    <li>The <strong>Configuring extra options</strong> page
<ul>
    <li>Check <strong>Enable file system caching
</strong>This option is checked by default. Caching improves performance of certain Git operations.</li>
    <li>Check <strong>Enable Git Credential Manager
</strong>The Git Credential Manager for Windows (GCM) provides secure Git credential storage for Windows. GCM provides multi-factor authentication support for Visual Studio Team Services, Team Foundation Server, and GitHub. Enabling GCM prevents the need for Git to continuously prompt for your Git credentials for nearly every operation. For more information see the <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows">GCM documentation</a> on GitHub.</li>
    <li>Check <strong>Enable symbolic links</strong></li>
</ul>
</li>
</ul>

These are the options I chose. You may have different requirements in your environment.

<h2>Install the Posh-Git module</h2>

Now that we have the Git client installed we need to enable Git functionality for PowerShell. <a href="https://www.powershellgallery.com/packages/posh-git">Posh-Git</a> from the Gallery. For more information about Posh-Git, see <a href="https://github.com/dahlbyk/posh-git">Posh-Git on GitHub</a>.

If you have PsGet installed just run:

```powershell
Install-Module posh-git
```

Alternatively, you can install Posh-Git manually using the instructions in the README.MD in the GitHub repository.

Once Posh-Git is installed you need to integrate Git into your PowerShell environment. Posh-Git includes an example profile script that you can adapt to your needs.

<h3>Integrate Git into your PowerShell environment</h3>

Integrating Git into PowerShell is simple. There are three main things to do:

<ol>
    <li>Load the Posh-Git module</li>
    <li>Start the SSH Agent Service</li>
    <li>Configure your prompt to show the Git status</li>
</ol>

Add the following lines to your PowerShell profile script.

```powershell
Import-Module posh-git
Start-SshAgent -Quiet
function global:prompt {
    $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = [Security.Principal.WindowsPrincipal] $identity
    $name = ($identity.Name -split '\\')[1]
    $path = Convert-Path $executionContext.SessionState.Path.CurrentLocation
    $prefix = "($env:PROCESSOR_ARCHITECTURE)"

    if($principal.IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) { $prefix = "Admin: $prefix" }
    $realLASTEXITCODE = $LASTEXITCODE
    $prefix = "Git $prefix"
    Write-Host ("$prefix[$Name]") -nonewline
    Write-VcsStatus
    ("`n$('+' * (get-location -stack).count)") + "PS $($path)$('>' * ($nestedPromptLevel + 1)) "
    $global:LASTEXITCODE = $realLASTEXITCODE
    $host.ui.RawUI.WindowTitle = "$prefix[$Name] $($path)"
}
```

The prompt function integrates Git into your PowerShell prompt to show an abbreviated <code>git status</code>. See the <a href="https://github.com/dahlbyk/posh-git/blob/master/readme.md">README</a> for Posh-Git for a full explanation of the abbreviated status. I have also customize my prompt to show me my user context, whether I am running in a 64-bit or 32-bit shell, and if I am running elevated. Customize this function to meet your needs or preferences.

At this point you are done. You can use Git from PowerShell. Go forth and clone a repo.

<h2>Customize your Git environment</h2>

You may want to customize some of the settings of your Git environment, especially if this is a new install of Git. Being a good project contributor in Git you should identify yourself so that Git knows who to <code>blame</code> for your commits. Also, I found that the default colors used by Git in the shell could be hard to read. So I customized the colors to make them more visible. For more information, see the <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">Customizing Git</a> topic in the Git documentation.

The following commands only need to be run once. You are setting global preferences so, once they are set, they are used every time you start a new shell.

```powershell
# Configure your user information to match your GitHub profile
git config --global user.name "John Doe"
git config --global user.email "alias@example.com"

# Set up the colors to improve visibility in the shell
git config --global color.ui true
git config --global color.status.changed "magenta bold"
git config --global color.status.untracked "red bold"
git config --global color.status.added "yellow bold"
git config --global color.status.unmerged "yellow bold"
git config --global color.branch.remote "magenta bold"
git config --global color.branch.upstream "blue bold"
git config --global color.branch.current "green bold"
```

As I said at the beginning, this is what works for me. Your mileage may vary. Customize this for your preferences and environmental needs.

In future articles, I plan to share scripts I have created to help me with my Git workflow. Do you use Git with Powershell? Share your questions and experiences in the comments.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>223</wp:post_id>
  <wp:post_date>2016-12-05 13:37:09</wp:post_date>
  <wp:post_date_gmt>2016-12-05 21:37:09</wp:post_date_gmt>
  <wp:post_modified>2018-07-04 12:29:17</wp:post_modified>
  <wp:post_modified_gmt>2018-07-04 20:29:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-git-from-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="git"><![CDATA[Git]]></category>
  <category domain="category" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[43452]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29663023321]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:11212690;s:53:"https://twitter.com/swsamwa/status/805888793458909184";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_11153016</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_11212690</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[swsamwa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_03d9e627e13160682d586001ba787f54</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Reading List</title>
  <link>https://seanonit.wordpress.com/readinglist/</link>
  <pubDate>Wed, 01 Mar 2017 18:04:05 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">https://seanonit.wordpress.com/?page_id=315</guid>
  <description/>
  <content:encoded><![CDATA[I am always on quest to continue learning. This is a collection of books that I have found helpful or insightful. I will continue to add titles as they come to me, so check back occasionally to see what's new.

<h2>PowerShell</h2>

<table><colgroup> <col style="vertical-align:top;" span="2" /> </colgroup>
<tbody>
<tr>
<th width="20%">Book</th>
<th width="80%">Description</th>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/1617294160/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617294160&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=088c9c62b8bcc25e995a04ba79b9f2f8" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1617294160&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=1617294160" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/1617294160/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617294160&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=05c197ec0065bdb5634d19b07eb5dfd2" target="_blank">Learn Windows PowerShell in a Month of Lunches</a>

A good tutorial for getting started with PowerShell.</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/1617291161/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617291161&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=19b1173a39c56b7d6c7e2c4a74cc362d" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1617291161&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=1617291161" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/1617291161/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617291161&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=5b67743b8766897b1137bb94d40f44f6" target="_blank">Learn PowerShell Toolmaking in a Month of Lunches</a>

The sequel to "Learn PowerShell...", this book teaches you how to create reusable tools in PowerShell including creating your own modules.</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/1617291315/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617291315&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=cfc99158cfe38a729f38ee8a7e6ebd0d" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1617291315&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=1617291315" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/1617291315/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617291315&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=a1058d19470bfbe97e086b8ec8b1d8b6" target="_blank">PowerShell Deep Dives</a>

This is a compilation articles from a Who's Who of the PowerShell literati. Lots of good, deep examples. Not all of the examples may apply to your specific needs but there is still a lot to learn from these.</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/1449320686/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1449320686&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=b891ea03f6936fe6aeb762cc6ad38c52" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1449320686&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=1449320686" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/1449320686/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1449320686&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=b9815b75d4d0edb240c4edb49b07ef2c" target="_blank">Windows PowerShell Cookbook: The Complete Guide to Scripting Microsoft's Command Shell</a>

A well organize collection of common tasks that most scripters may encounter. Mr. Holmes defines the problem being solved, presents a solution in PowerShell, and discusses the reasoning behind his designs.</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/1633430294/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1633430294&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=5f98be8db6f51647327bf1f91b1d65fc" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1633430294&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=1633430294" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/1633430294/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1633430294&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=4de5d617a21af74f5125aa3bb4ea423b" target="_blank">Windows PowerShell in Action</a>

This is a great reference for PowerShell, written by one of the principal designers the language.</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/1617292184/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617292184&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=77ba0deb7ae6422616ed5c1c074c9661" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1617292184&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=1617292184" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/1617292184/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1617292184&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=3eb8dd6d562bec016f7b219675d7f620" target="_blank">PowerShell in Depth</a>

This is a companion to the previous book. Another good cookbook-like collection.</td>
</tr>
</tbody>
</table>

<h2>DevOps</h2>

<table><colgroup> <col style="vertical-align:top;" span="2" /> </colgroup>
<tbody>
<tr>
<th width="20%">Book</th>
<th width="80%">Description</th>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/0988262509/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0988262509&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=457eeb1bd7108b03c2d358984fae66a6" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0988262509&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=0988262509" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/0988262509/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0988262509&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=c586d106b274ecb4c5d5ffc6cfe4ec5b" target="_blank">The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win</a>

Still confused about what DevOps is all about? This book explains DevOps in non-technical terms in the form of a story. This book reads like a novel rather than a dry business book.

<a href="https://www.amazon.com/Audible-Free-Trial-Digital-Membership/dp/B00NB86OYE/?ref_=assoc_tag_ph_1485906643682&amp;_encoding=UTF8&amp;camp=1789&amp;creative=9325&amp;linkCode=pf4&amp;tag=scriptingsean-20&amp;linkId=b3c01a0f1022f8d25277facf42edafab" target="_blank">Available on Audible - Try it and Get Two Free Audiobooks</a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=pf4&amp;o=1" alt="" width="1" height="1" border="0" /></td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/1942788002/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1942788002&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=cccb37248257856c914e74e9d5164fae" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1942788002&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=1942788002" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/1942788002/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1942788002&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=704b95ed8156004942fc6d59e26828fc" target="_blank">The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations</a>

This is the follow up "The Phoenix Project". I have not read this yet but it is on my TO DO list. Here is a description from the jacket:

"Following in the footsteps of The Phoenix Project, The DevOps Handbook shows leaders how to replicate these incredible outcomes, by showing how to integrate Product Management, Development, QA, IT Operations, and Information Security to elevate your company and win in the marketplace."</td>
</tr>
</tbody>
</table>

<h2>Career &Personal Development</h2>

<table><colgroup> <col style="vertical-align:top;" span="2" /> </colgroup>
<tbody>
<tr>
<th width="20%">Book</th>
<th width="80%">Description</th>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/0787960756/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0787960756&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=25b8ad5c05dfaa841ab9d69d85b14c3e" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0787960756&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=0787960756" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/0787960756/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0787960756&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=6f22decd68c058a3df505dde0d12a04b" target="_blank">The Five Dysfunctions of a Team: A Leadership Fable</a>

This is a must read for anyone leading a team. And I would recommend it for anyone that has to work on a team. This helps you understand how to build effective teams that get things done. Great lessons on how to build trust and that it is OK to disagree. This is another great business book that reads like a novel rather than a dry B-school textbook.

<a href="https://www.amazon.com/Audible-Free-Trial-Digital-Membership/dp/B00NB86OYE/?ref_=assoc_tag_ph_1485906643682&amp;_encoding=UTF8&amp;camp=1789&amp;creative=9325&amp;linkCode=pf4&amp;tag=scriptingsean-20&amp;linkId=b3c01a0f1022f8d25277facf42edafab" target="_blank">Available on Audible - Try it and Get Two Free Audiobooks</a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=pf4&amp;o=1" alt="" width="1" height="1" border="0" /></td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/159562015X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=159562015X&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=c5dae6c6e06fd6311d047a0954700a15" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=159562015X&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=159562015X" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/159562015X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=159562015X&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=52d6450c179bc86177016284f45d8795" target="_blank">StrengthsFinder 2.0</a>

Forget Myers-Briggs, this is the personality inventory you want to take. Don't buy a used version. The book comes with an access key to take the StrengthsFinder evaluation on Gallup's website.</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/0375407723/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0375407723&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=676bc04a7aae6e935984e84e42e6d68f" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0375407723&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=0375407723" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/0375407723/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0375407723&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=c62becefb007a932b538d93d1698ba1e" target="_blank">The Brand You 50 : Or : Fifty Ways to Transform Yourself from an 'Employee' into a Brand That Shouts Distinction, Commitment, and Passion!</a>

The only promotion is self-promotion. This classic from Tom Peters helps you build your personal brand. Your personal brand is what people think about when they think of you. Time to take control of that image.</td>
</tr>
</tbody>
</table>

<h2>Writing</h2>

<table><colgroup> <col style="vertical-align:top;" span="2" /> </colgroup>
<tbody>
<tr>
<th width="20%">Book</th>
<th width="80%">Description</th>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/0062477153/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0062477153&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=a7f5f6aa8b238f0b4cea010439970f8e" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0062477153&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=0062477153" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/0062477153/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0062477153&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=f94751e86f528962c2601798d92f90a6" target="_blank">Writing Without Bullshit: Boost Your Career by Saying What You Mean</a>

There are a lot of style guides and writing manuals. This is the first one I have found the really teaches you how to write.</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/0312679459/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0312679459&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=bda6257cd338e5fcd18aed3a468cc65b" target="_blank">
<img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0312679459&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=scriptingsean-20" width="100" height="125" border="0" /></a>
<img style="border:none !important;margin:0!important;" src="//ir-na.amazon-adsystem.com/e/ir?t=scriptingsean-20&amp;l=am2&amp;o=1&amp;a=0312679459" alt="" width="1" height="1" border="0" /></td>
<td><a href="https://www.amazon.com/gp/product/0312679459/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0312679459&amp;linkCode=as2&amp;tag=scriptingsean-20&amp;linkId=f90ab0b6e30c0bbbecc4ec4968a9bd32" target="_blank">Handbook of Technical Writing</a>

A modern, comprehensive reference and style guide for technical writing.</td>
</tr>
</tbody>
</table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>315</wp:post_id>
  <wp:post_date>2017-03-01 10:04:05</wp:post_date>
  <wp:post_date_gmt>2017-03-01 18:04:05</wp:post_date_gmt>
  <wp:post_modified>2017-03-02 07:08:27</wp:post_modified>
  <wp:post_modified_gmt>2017-03-02 15:08:27</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>readinglist</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[page-full-width.php]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>MeMostInteresting</title>
  <link>https://seanonit.wordpress.com/about/memostinteresting/</link>
  <pubDate>Sun, 12 Mar 2017 02:43:35 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2014/10/memostinteresting.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>417</wp:post_id>
  <wp:post_date>2017-03-11 18:43:35</wp:post_date>
  <wp:post_date_gmt>2017-03-12 02:43:35</wp:post_date_gmt>
  <wp:post_modified>2017-03-11 18:43:35</wp:post_modified>
  <wp:post_modified_gmt>2017-03-12 02:43:35</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>memostinteresting</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2014/10/memostinteresting.jpg</wp:attachment_url>
</item>
<item>
  <title>elfphoto</title>
  <link>https://seanonit.wordpress.com/about/elfphoto/</link>
  <pubDate>Sun, 12 Mar 2017 02:58:01 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2014/10/elfphoto.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>418</wp:post_id>
  <wp:post_date>2017-03-11 18:58:01</wp:post_date>
  <wp:post_date_gmt>2017-03-12 02:58:01</wp:post_date_gmt>
  <wp:post_modified>2017-03-11 18:58:01</wp:post_modified>
  <wp:post_modified_gmt>2017-03-12 02:58:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>elfphoto</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2014/10/elfphoto.jpg</wp:attachment_url>
</item>
<item>
  <title>tvgrafik</title>
  <link>https://seanonit.wordpress.com/about/tvgrafik/</link>
  <pubDate>Sun, 12 Mar 2017 02:58:03 +0000</pubDate>
  <dc:creator>swsamwa</dc:creator>
  <guid isPermaLink="false">http://seanonit.files.wordpress.com/2014/10/tvgrafik.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>419</wp:post_id>
  <wp:post_date>2017-03-11 18:58:03</wp:post_date>
  <wp:post_date_gmt>2017-03-12 02:58:03</wp:post_date_gmt>
  <wp:post_modified>2017-03-11 18:58:03</wp:post_modified>
  <wp:post_modified_gmt>2017-03-12 02:58:03</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tvgrafik</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://seanonit.files.wordpress.com/2014/10/tvgrafik.jpg</wp:attachment_url>
</item>
  </channel>
</rss>
